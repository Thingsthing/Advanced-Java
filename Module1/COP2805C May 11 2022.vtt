WEBVTT

1
00:00:02.129 --> 00:00:05.700
Hey, recording we are recording yes.

2
00:00:05.700 --> 00:00:10.169
Okay, thanks. Okay. Okay. So our core shell.

3
00:00:10.169 --> 00:00:21.089
Is mostly there, as I mentioned, this is this course is kind of in construction under construction, uh, mostly because I'm adding some, uh.

4
00:00:21.089 --> 00:00:33.899
Content that uses GitHub, because we're gonna be incorporating that into our new bachelor's programs. And so this is a pilot for that material and it's very possible that we're gonna just crash and burn on it.

5
00:00:33.899 --> 00:00:46.255
But, like I said, if that comes to to happen, we're going to fall back to the old way of doing things, at least, for the 1st, couple of weeks here, but we want to try it tonight. I'm going to work with you tonight and just see how it works out. Okay.

6
00:00:46.585 --> 00:00:56.335
We'll go through the lecture material and I've got, um, this is an old recording. That's why I'm not showing you. You're seeing stuff that you don't see on your shell, uh, practice exercise.

7
00:00:56.609 --> 00:01:03.600
Uh, if I had this in there, this should be published, I think, hang on. Let me see, I think.

8
00:01:05.129 --> 00:01:12.719
No okay. Okay. So what I've done is I put the practice exercise up on to GitHub.

9
00:01:12.719 --> 00:01:17.489
But I think I can still publish this. Let me do that cause we will.

10
00:01:17.489 --> 00:01:21.629
Want to look at it if it has the most recent thing in there.

11
00:01:23.760 --> 00:01:27.150
No, that's old. I don't want that. Nevermind.

12
00:01:27.150 --> 00:01:33.599
So, the most recent 1 is on GitHub and we're going to try to work that so that we can do it from GitHub. Um.

13
00:01:33.599 --> 00:01:38.010
Does everybody have a GitHub account?

14
00:01:39.480 --> 00:01:44.790
No okay. Okay. So we can go through and get that. That happens pretty quick. How about intelligent.

15
00:01:44.790 --> 00:01:51.000
Jet brains. Okay. Bye.

16
00:01:51.000 --> 00:01:55.319
No, it's intelligent from jet rates.

17
00:01:57.120 --> 00:02:01.319
Yes. Oh, ultimately. Okay. So you did you get the license?

18
00:02:04.890 --> 00:02:08.819
Okay, uh, I give you the site link, um.

19
00:02:08.819 --> 00:02:16.020
Or do I give you a site link on? It's in the syllabus the syllabus is there. Now, by the way it was not there until about.

20
00:02:16.020 --> 00:02:21.180
515 today, um, but it is there now, we can look at it real quick just to see.

21
00:02:21.180 --> 00:02:35.849
Uh, the dates on some of the things might be a little off, but I think I've got most of them put together and the content is pretty close, although that might change as well, uh, learning outcomes all this stuff. We normally go through, uh, our Monday holidays that don't affect y'all.

22
00:02:35.849 --> 00:02:50.610
The textbook I'm using is the same 1 used, and if you took professor brought us 2551 using that same textbook. If you took my job of 1 course, that was a recommended textbook for it. I could say that you really don't.

23
00:02:50.610 --> 00:03:04.560
Have to use it, because a lot of material is gonna be supplemental and I'm already giving you that isn't in the textbook. Okay. We used to use a different textbook called a system called ramble by. I can't remember the author's name that was.

24
00:03:04.560 --> 00:03:10.409
Pretty good, but it's starting to get kind of outdated and the rebel system was kind of expensive and and.

25
00:03:10.409 --> 00:03:25.164
Uh, awkward for me to use. I wasn't crazy about using it for teaching with and so I just wanted to go to the flat textbook and I don't have a good textbook that goes into all the content that we're covering in this course. So I've got the supplemental documents from the old textbook that I can provide us PDFs to you and use that.

26
00:03:25.194 --> 00:03:36.955
But most of the stuff's gonna come from the slides and stuff we work through as a hands on, because it's really getting your hands dirty on this stuff to learn how to do things, especially when we get to things like multithreading, internationalization and stuff like that.

27
00:03:37.615 --> 00:03:41.305
Uh, we do have the Java tutorials and they go into a lot of this stuff.

28
00:03:41.580 --> 00:03:45.090
Um, so.

29
00:03:45.090 --> 00:03:48.750
I'm saying, uh, 8 here.

30
00:03:49.134 --> 00:04:03.805
But I had 17 installed on the horizon system and, in fact, maybe on these systems too, and it should be interchangeable effectively. So we might be moving up to 17 as we go through this stuff. But 8 will work.

31
00:04:03.805 --> 00:04:05.093
And Java, 17.

32
00:04:05.370 --> 00:04:19.800
When you use intelligent, you can kind of say, make it backward compatible with 8, and you don't have to worry about the changes. There's some new features and a lot of new features that we're not really going to get into here. Because this course is really focused on, um.

33
00:04:19.800 --> 00:04:31.014
And not any of that really, really new stuff since they've gone, you know, they've gone to like, a, a 6 to 6 month a 1 year release schedule where it used to be like, a 6 year release schedule. Okay.

34
00:04:31.014 --> 00:04:42.535
I mean, has been around for almost 10 years now and so they're really moving and you just can't keep up. Now it's just like, you know, the basic Java and that's good. And then you have to learn the little.

35
00:04:42.869 --> 00:04:55.223
Quirks of the new versions as you go through it, but we're gonna use 8 and, um, we're gonna use intelligent, ultimate in class. If you want to use something else you can for this class is not gonna be a big difference.

36
00:04:55.223 --> 00:04:59.064
If you're taking the, the Java, EE, there's a big difference in that stuff.

37
00:04:59.064 --> 00:05:10.913
So intelligent we found out, I found it as, like, the best to use for those framework operations, especially as we move into the spring framework versus the old stuff.

38
00:05:11.244 --> 00:05:19.764
So, um, that's why I'm using that here and you can get your license here. If you go to this site, you can apply for it and they'll get it back to you pretty quick. And it's good for a year.

39
00:05:20.303 --> 00:05:34.494
And I renew every year, and as long as you're a student, you can keep renewing it. And intelligent is like, huge in terms of the features. They offer all the products and stuff that are associated with that. So, it's kind of like an office license. It's going to be really useful for you.

40
00:05:35.153 --> 00:05:36.653
Uh, obviously they're trying to get you.

41
00:05:37.048 --> 00:05:40.619
Hooked on it, so that when you move into the industry, you'll be using it too. Right?

42
00:05:40.619 --> 00:05:46.408
Yeah, toward the end, we're going to touch on spring a little bit.

43
00:05:46.408 --> 00:05:49.858
But the job of E, course we use spring heavily now. Yes.

44
00:05:52.139 --> 00:05:55.978
Good or bad? No. Okay. Well, that's what we do.

45
00:05:55.978 --> 00:06:01.709
Okay, um, and then getting GitHub. So, this, uh, is.

46
00:06:01.709 --> 00:06:13.528
Is new for us, we're, we're trying to incorporate these stuff because our industry partners really want us to be using this and teaching you how to use it. Some of you are using it comfortable with it. That's great. The.

47
00:06:13.528 --> 00:06:18.749
Um, resource I'm using is called GitHub classroom.

48
00:06:19.134 --> 00:06:33.024
Which means I can create a class which I've done for this class with a roster, which I'll be adding you to that roster. And then you're using private repositories to do assignments with your submitting your work.

49
00:06:33.173 --> 00:06:46.853
And then I'm using those repository to look at the changes. And see what you've done, and the idea is that you're not out there on a public repository where everybody in the world, you know, looking at your stuff and stealing your solutions and all this stuff that other private.

50
00:06:46.884 --> 00:06:56.543
So that only you, and I can take a look at them. So again, this is something new so I'm going to be trying it and There'll be some bumps, but hopefully we'll get through it.

51
00:06:56.634 --> 00:07:09.774
And so we have GitHub, which is just a website you go and sign up for your account and I've asked use your student credentials. If you're used to GitHub with a personal account. That's fine. But I would ask that you do a 2nd account.

52
00:07:10.048 --> 00:07:16.319
Which, uh, uses your student credentials so that it's consistent in my classroom roster.

53
00:07:16.319 --> 00:07:23.848
Okay, for all your work in this class and then when you're done with the guys, you just delete the account if you want to, um.

54
00:07:23.848 --> 00:07:26.908
And then the gift itself, it runs locally.

55
00:07:26.908 --> 00:07:31.228
And these are the installers for the different platforms, but it should be on.

56
00:07:31.228 --> 00:07:36.358
All of our lab systems, I'm gonna run to a horizon here real quick just to make sure.

57
00:07:36.358 --> 00:07:42.959
Because I've had them add a lot of stuff to the Verizon system over the last year to get ready for.

58
00:07:42.959 --> 00:07:46.978
The new application development stuff so I'm going to academic. I. T.

59
00:07:59.968 --> 00:08:03.988
And you see, we've got intelligence on there.

60
00:08:03.988 --> 00:08:07.918
We also have Jay graphs. It's got JD K.

61
00:08:07.918 --> 00:08:15.478
But I think they moved to 17 now, also, they both loaded net beans, but we're not using that beach for this course.

62
00:08:15.478 --> 00:08:27.449
Microsoft edge, no idea why that's there. We just don't want to get rid of that. Um, our studio, all these tools employees that you had to play with if you're interested in doing that, but going to the command line command tool.

63
00:08:28.769 --> 00:08:35.129
I go to my documents folder so when you logged into to, um.

64
00:08:36.509 --> 00:08:44.578
Uh, Verizon, you get a folder with your own ID in it. So you see, mine is D, a single that's my user ID.

65
00:08:45.658 --> 00:08:51.028
So, go there, and then from there, I've got my documents folder.

66
00:08:52.259 --> 00:09:00.538
And Nothing's in there, because it's horizon, I haven't put anything in there, but we can run get from the command line here. And if I run .

67
00:09:00.538 --> 00:09:03.839
Please minus flyest version to see how good.

68
00:09:03.839 --> 00:09:07.168
Okay, so I've got to get version 2.34.

69
00:09:07.168 --> 00:09:18.688
Point 1, it might be on these classroom systems as well. I'm not sure how well, they keep those synced up with it, but I do make sure they keep the Verizon stuff updated with that. If I do Java.

70
00:09:18.688 --> 00:09:22.078
Hold on my path, this version.

71
00:09:22.078 --> 00:09:28.048
Uh, we have okay, so the job of 17 by default.

72
00:09:28.048 --> 00:09:33.208
Go to program files and Java.

73
00:09:34.318 --> 00:09:46.558
You can see, we've got both 8 and 17 installed and so if necessary, we can fall back to 8, but 17 should work in a backward compatibility mode to try that. We might get it by default. Anyway.

74
00:09:46.558 --> 00:09:50.188
Okay, so that's the Verizon system now.

75
00:09:50.188 --> 00:09:56.369
If you're not familiar with horizon, you have to remember that anything you do on this will go away after you log out.

76
00:09:56.369 --> 00:10:01.769
So, if you set up a repository locally here, and do some work on it, you need to make sure you push it back up.

77
00:10:01.769 --> 00:10:07.558
To get hub before you log out, because otherwise you'll lose all your changes. So that's all. It's really important to Verizon.

78
00:10:10.889 --> 00:10:19.109
Okay, so back to the syllabus, see what else we got going on here and we may add stuff as we go on.

79
00:10:19.109 --> 00:10:22.318
We find something cool that we want to play around with. It will try.

80
00:10:22.318 --> 00:10:31.769
Um, the assignments, this is my standard template for the assignments idea. We have a practice exercise. We have graded assignments.

81
00:10:31.769 --> 00:10:35.038
Review quizzes these are.

82
00:10:35.038 --> 00:10:39.119
Content from the slides as well as, um.

83
00:10:39.119 --> 00:10:45.749
Uh, job stuff I mentioned up here in the outcomes, none of the outcomes from in the, in the description.

84
00:10:45.749 --> 00:10:49.109
That's a good way back up again to the top.

85
00:10:51.839 --> 00:10:56.489
Find it I thought I had in the catalog. Yes, not.

86
00:10:56.489 --> 00:11:07.918
O, okay, well, I do have it down here in the calendar. I thought I had a description as well, but I do also include some, um.

87
00:11:07.918 --> 00:11:10.979
Oracle Java 8.

88
00:11:10.979 --> 00:11:19.168
Certification material and the quizzes, which are just challenging questions regarding the language that dig a little deeper than.

89
00:11:19.168 --> 00:11:31.889
Gustavo my job 1 course. Okay. Which had some pretty challenging questions there on the language and this is going further and covering more content. Uh, not that it's enough to really prepare you for that exam.

90
00:11:31.889 --> 00:11:37.109
Because that's a tough 1, I mean, is tough enough and is like.

91
00:11:37.109 --> 00:11:45.899
Next level tough, but you got to have the to get there anyway and so it'll just kind of reinforce that if you do this. And so every night you see a question.

92
00:11:45.899 --> 00:11:52.379
Asking more of a language oriented saying, versus a, uh, course, content oriented question.

93
00:11:52.379 --> 00:12:05.219
And as always, if you have any questions about those who get stuck on something, you can email me. And I can work through it with you that you can take these as many times as you want to try to get the highest score. And then we've got a midterm.

94
00:12:05.219 --> 00:12:09.239
And you'll be doing some coding of both the midterm and the final.

95
00:12:09.239 --> 00:12:15.869
Um, so again, this is just standard template for my course.

96
00:12:15.869 --> 00:12:25.048
Of course, uh, Hello when you go through it so the calendar I mentioned might be a little off. We have a couple of nights. We're not going to meet.

97
00:12:25.048 --> 00:12:28.139
And so they don't have to be or you do these stuff online.

98
00:12:28.139 --> 00:12:41.068
Up here in the 7 on July 13th, and then July, 27 at a conference for a workshop at a conference for both of those. But I'll provide material for you to work on on that.

99
00:12:41.068 --> 00:12:45.658
Um, and then these due dates, I haven't scrubbed them.

100
00:12:45.658 --> 00:12:51.749
Some of them might be a little off, for instance. Uh, uh, well, the final exam. That's right. 817.

101
00:12:53.278 --> 00:13:04.408
But, uh, if if there's anything off it, it's only gonna be off by a day. So, here, and I'll take a look at it and try to fix it. But I think I got, em, it was just a real rush job when I was getting everything, put together to get this uploaded. So you can use it.

102
00:13:04.408 --> 00:13:08.219
And then standard grading 900 to 1000 for a.

103
00:13:08.219 --> 00:13:12.778
8 to 900 for B and so on, um.

104
00:13:13.374 --> 00:13:21.833
Late work now, if you've had my courses, you know, I'm kind of strict on late work, but for this course, this is much more relaxed, you know, if you need a little extra time or something.

105
00:13:21.833 --> 00:13:33.833
Let me know, and I can work on that with you, but it's not gonna be, uh, especially because we are gonna be working through some things with a new content is not gonna be a hard and fast due dates on some of this stuff.

106
00:13:35.339 --> 00:13:39.778
So, I'll be very, uh, open to, to helping him with those.

107
00:13:39.778 --> 00:13:44.729
And that's about it for this my standard grading rubric.

108
00:13:44.729 --> 00:13:49.619
You know, your stuff needs to run, need to comment, you dent dent and all that stuff.

109
00:13:51.568 --> 00:13:56.099
Okay, so any questions on what you've seen of the syllabus so far.

110
00:13:56.099 --> 00:13:59.249
Are you standard.

111
00:14:02.698 --> 00:14:06.178
That's it with you after a couple, like.

112
00:14:06.178 --> 00:14:09.298
Lastly, so.

113
00:14:09.298 --> 00:14:21.448
Please wait for a meeting. I, for summer, we don't do office hours. It's just like, email me and say, can we meet it? Okay so it's, it's just by, you know, let me know what an appointment, whatever you call it.

114
00:14:23.458 --> 00:14:27.239
But we don't usually run regular office hours during the summer.

115
00:14:33.269 --> 00:14:37.198
Yeah, be 12, right?

116
00:14:37.198 --> 00:14:41.458
As does professor brought his Python course. Awesome.

117
00:14:43.168 --> 00:14:46.769
Choose wisely.

118
00:14:50.038 --> 00:15:03.089
Okay, so let's see what else we got here, we got the Windows 8, the, if you haven't installed that, but again, we might just use the 17 that's loaded on here. Uh, programming, assignment rubric.

119
00:15:03.089 --> 00:15:08.009
And then we have module 1 so module ones got a few things in it.

120
00:15:09.149 --> 00:15:13.649
Um, review quiz, of course.

121
00:15:14.908 --> 00:15:20.068
This GitHub assignment so if you read it, this is how.

122
00:15:20.068 --> 00:15:26.578
This thing is supposed to work, and I have no idea what you're going to see when you do this. But this link is supposed to be.

123
00:15:26.578 --> 00:15:36.839
The way for you to get to the assignment, and this is just a no due date work at your own pace for the whole semester to go through GitHub fundamentals, get hub offers this.

124
00:15:36.839 --> 00:15:42.749
To instructors as something you could put in your courses for people to learn GitHub. I have no idea if it's any good.

125
00:15:42.749 --> 00:15:54.149
I haven't been through it. Have you done it? Okay well, then there you go right? I didn't put a due date on it. Go through it. And, you know, if it's good I.

126
00:15:54.149 --> 00:15:57.719
Uh, if I can figure out how to get to it myself to go through it, I'm going to do that because.

127
00:15:57.719 --> 00:16:04.109
Uh, okay, well that's yeah, and that's all pretty much all we need.

128
00:16:04.109 --> 00:16:07.318
Get jump, get get dive, get.

129
00:16:08.489 --> 00:16:12.119
Yeah, yeah.

130
00:16:12.119 --> 00:16:17.879
So, I've got that and so once you accept it, it's supposed to populate in my.

131
00:16:17.879 --> 00:16:32.874
Course that you've accepted it and then you're in my roster. So 1 way, you know, that you should accept that just take a look at it. I've also added this get quick reference because this is the stuff that we'll probably need to do the things that we're going to do with it tonight.

132
00:16:32.874 --> 00:16:38.573
If we do it, uh, this week, if not tonight, uh, just some hints and things that we'll do.

133
00:16:38.849 --> 00:16:44.818
And I'll go through this with you to get that out there and then there is.

134
00:16:46.014 --> 00:16:57.114
The greater program is and this is another 1 where there's a link and so this is the 1 where you need to go through and what's out here at this link is a template repository.

135
00:16:57.533 --> 00:17:01.104
And so you're going to create your own repository that will have the files.

136
00:17:01.464 --> 00:17:12.894
Or it's supposed to have the files in it from this template that I created in the template there's the solution to the practice exercise, which I'm going to show you tonight. Okay and you're gonna, you're gonna add to that.

137
00:17:12.894 --> 00:17:18.203
You're gonna add some features to that application for the greater assignment and then just.

138
00:17:18.449 --> 00:17:23.278
Commit those changes and push it back up to the repository. Then I look and that's how I grade it.

139
00:17:23.278 --> 00:17:37.828
If everything works as I'm hoping it does, okay if we find out that it just doesn't work in or not. We can't get it going. Then I'll just give you the assignment. And then, you know, you can do it normally, and just submit it as, uh, attachment to the assignment here.

140
00:17:37.828 --> 00:17:52.288
But hopefully, if we get this going, this will be like, establishing the precedent for the next 5 years for our programs and I can point to y'all as saying Yeah and these students had no problem with that. I don't know why you can't get a work in. Right? So.

141
00:17:53.368 --> 00:17:59.098
Okay, so we'll go through this when we get to it, uh, later on tonight.

142
00:18:00.209 --> 00:18:11.304
And that's pretty much for that module and then you can see the content recovery files streams next week, multi, threading, generics networking. This is really cool. The content, and this course is really cool. Okay.

143
00:18:11.394 --> 00:18:16.433
Networking creating a server and a client and communicating over the network to it. Uh.

144
00:18:16.798 --> 00:18:24.659
Database is a little bit in 2551. we'll dive in a little deeper for that. You did a little bit of FX. We're gonna dive in deeper on that.

145
00:18:24.659 --> 00:18:30.749
Uh, internationalization, which I think is totally cool. And I did this in my actual career where you're actually, uh.

146
00:18:30.749 --> 00:18:35.848
Generalizing your code so that it can be distributed to different locales.

147
00:18:35.848 --> 00:18:47.874
And so you write it such that okay, we need this in French. We need this in German, and we need this Chinese, and we need our Mandarin or whatever. And so that's a really cool feature that we can do and go through that as well service.

148
00:18:47.874 --> 00:19:01.644
And this is kind of getting into the E, course stuff that we do is just the basis. And again, this is in 200,551. we'll do a little bit more here. Phases is the user interface for E beings and persistence. We'll talk about that again.

149
00:19:01.644 --> 00:19:08.844
Stuff we do on the job at E, course and more depth is something that is really unique. This allows you to communicate with.

150
00:19:11.159 --> 00:19:19.558
C and C +, plus programs or libraries. I use this a lot because I worked on hardware.

151
00:19:19.558 --> 00:19:30.864
And you can't interface with directly with hardware from Java, right? It's it's writing in a virtual, uh, the the VM, and it doesn't have a way to talk to a board, you know, a device driver on board or something.

152
00:19:30.864 --> 00:19:35.064
So we had to write a lot of code that would run in C language.

153
00:19:35.368 --> 00:19:41.189
Typically, they would interact with the hardware and then we'd use Java with a J and I interface to get to.

154
00:19:41.189 --> 00:19:47.969
Those boards through that ceiling interface. So this is a kind of cool thing. And in fact, a lot of stuff in Java.

155
00:19:47.969 --> 00:19:54.509
Uses this for the VM, the virtual mission itself, because it has to interact directly with hardware. You just don't see it.

156
00:19:54.509 --> 00:20:01.259
And then Jason, so everybody is familiar with Jason. Maybe did we talk about it in 2151?

157
00:20:01.259 --> 00:20:08.519
Maybe this is the Python course, but we talk about it here. This is 1 of the biggest, you know, data interchange formats that we use.

158
00:20:08.519 --> 00:20:12.719
To bring objects, download them and and pass around the network and stuff.

159
00:20:12.719 --> 00:20:16.919
I, if we get this to this or not, I'm not sure this is again that.

160
00:20:16.919 --> 00:20:20.969
Anything that we, that's left over and maybe the content.

161
00:20:20.969 --> 00:20:31.169
Okay, so professor brought it says, you know, Python, not 2551. okay well, then we'll cover Jason in this course and there are libraries we can use to read and do things with Jason from Java.

162
00:20:31.169 --> 00:20:36.269
All right, so that's the basics of what we're covering.

163
00:20:37.618 --> 00:20:42.479
So, let's go ahead and just jump in and start talking about this stuff.

164
00:20:44.189 --> 00:20:56.729
These slides, we might end up finding some stuff that's outdated. I haven't looked at them in a year or so cause I taught this last year. Um, but it's still.

165
00:20:56.729 --> 00:21:06.749
Uh, usable content. Uh, the assumptions we have going in here is that you're familiar with the basics. Okay the Java language primitive data types.

166
00:21:06.749 --> 00:21:10.138
If statements, loops, methods, arrays.

167
00:21:10.138 --> 00:21:16.648
And the basic oh, concepts you're talking about polymorphism them and we're going to do a little review of this stuff.

168
00:21:16.648 --> 00:21:23.038
You can create a an application from scratch. You can use an.

169
00:21:23.038 --> 00:21:35.068
Uh, you're interested in learning about advanced job while you won't be here if you weren't. Okay. And again, if it happens that you're doing something that I'm not present for, that you'll be able to learn those given the material to do that.

170
00:21:35.068 --> 00:21:44.753
Um, if necessary, we can work in group to do some things that's more with. We do a lot of, uh, group work in there. And then you're kind of a reading code.

171
00:21:44.753 --> 00:21:58.854
Because as I've shown you already for your graded assignment, you're reading my code for a solution and then changing it. Okay. And that's I tell my students this is very rare that you write applications from scratch these days anymore. You're almost always basing it on.

172
00:21:58.854 --> 00:22:13.644
Somebody has done something else. I would say, probably 70 to 80% of coding. These days is not starting from the beginning. It's starting from somewhere somebody else left off and then picking up and changing it modifying it and doing that. So, you gotta get get good at reading other people's code.

173
00:22:14.368 --> 00:22:24.269
Okay, doesn't say you can't make fun of their code and, you know, say this is really ridiculous, but then you can fix it. Right but you do look at a lot of other people's code. So.

174
00:22:24.269 --> 00:22:28.979
But he can't say that about Mike until after this semester.

175
00:22:28.979 --> 00:22:34.618
Okay, so, on the 1st, things we want to look at is exceptions.

176
00:22:34.618 --> 00:22:44.009
We pretty much know how to do an exception and a program I'm assuming and I'm going to go ahead and go to horizon. Right?

177
00:22:44.009 --> 00:22:57.598
To be honest. I haven't tried this on intelligence. I need to make. Sure that this stuff works as we. Go through it. I'm gonna bring up intelligence on horizon and I like using horizon because I'm always starting from the same environment in these classrooms. I never know if there's little, you know.

178
00:22:58.163 --> 00:23:11.483
Breadcrumbs left from other installations or other people that have done stuff on them. Uh, 1 of the I. T, folks get in here. So Verizon I know is always starting from the same thing and everybody's working for the same base. And so, that's what I typically like to use it for.

179
00:23:11.903 --> 00:23:18.564
I mean, I'd use it on my system. I got everything loaded on my system. So I don't want to go there because it'll all work for me. And then it won't work for, you.

180
00:23:18.838 --> 00:23:25.679
So, that's why I like starting on horizon here. So when you get in here, you have the user agreement you just confirm it.

181
00:23:25.679 --> 00:23:29.278
Check it and either sand or don't send it it doesn't matter.

182
00:23:33.749 --> 00:23:36.808
And then you have to wait a few seconds what it brings up.

183
00:23:36.808 --> 00:23:47.128
The banner title screen, and then you get the license thing and so Here's where you have your authentication from your jeffrey's account. And so I'm just going to put in my email.

184
00:23:54.808 --> 00:24:01.618
And my password, and then I'm going to activate.

185
00:24:01.618 --> 00:24:06.058
And you got to do this every time you log in the horizon, unfortunately, but it's still.

186
00:24:06.058 --> 00:24:09.898
A reasonable licensing scheme that they use.

187
00:24:09.898 --> 00:24:15.778
And once you're there, you just hit continue and then it brings up the.

188
00:24:20.638 --> 00:24:35.338
And so we'll start with a new project, and this is where you have to fill in some things. Okay so we're doing Java and you see, it's using Java version 17 by default.

189
00:24:35.338 --> 00:24:38.578
Now, I can go in here and.

190
00:24:38.578 --> 00:24:42.989
See, the selection oh, here, I could select.

191
00:24:42.989 --> 00:24:55.348
This other for 8, I'm just going to stick with 17 and use my job at 8 code and assume it's all going to run. If I have problems, I'll back out to 8, but I'm just going to stick with a default for now, go to 17.

192
00:24:55.348 --> 00:25:00.778
And so from here, then you do a next.

193
00:25:02.999 --> 00:25:09.568
And you can create a project from a template, or you can just create a blank project. I'm going to create a blank project and see if it works.

194
00:25:11.338 --> 00:25:15.298
And I'm just going to call this, uh, test.

195
00:25:15.298 --> 00:25:23.699
Exceptions okay, and you can see down here where it's putting at users my user ID.

196
00:25:23.699 --> 00:25:33.088
Idea projects, which I could change if I want to and then test exceptions, which is the name of the project I give and I just hit finish.

197
00:25:36.808 --> 00:25:45.749
And then I'm in the project now you get this tip of the day.

198
00:25:45.749 --> 00:25:58.739
They have some really cool tips, but it's also annoying. So I usually just hit don't show tips and again, this only works for the current session. Next time you log in you got to reset everything and yet I close that out. I don't want to code with me.

199
00:25:59.999 --> 00:26:05.159
So, I click out of that, and we got some stuff that's still updating here.

200
00:26:05.159 --> 00:26:12.868
It can be a little slow down. Here you can see is indexing the K.

201
00:26:14.848 --> 00:26:18.659
Which is supposed to help speed things up eventually after you get it done.

202
00:26:18.659 --> 00:26:24.628
K. experimental features. I don't care.

203
00:26:24.628 --> 00:26:27.868
And effects, outing, exit, adding of a lot of stuff in here.

204
00:26:33.298 --> 00:26:38.219
All right, and you can also set your background and your colors here if you want to change it. Um.

205
00:26:38.219 --> 00:26:43.259
This is the, what's new I'm just going to bail out of that and so I get my dark background.

206
00:26:43.259 --> 00:26:52.618
So, if you, if you look at your project over here, you can see my project name test exceptions and you see this dot idea folder.

207
00:26:52.618 --> 00:26:59.939
It has some stuff in it, like, get ignored to tell get not to load things and then it's got a source folder.

208
00:27:01.138 --> 00:27:16.074
And that's where the source code will go. Okay. Now, when I click on that is 1 of your project structure. So it looks like we need to fill some more stuff in here.

209
00:27:16.318 --> 00:27:19.528
Let's see modules.

210
00:27:19.528 --> 00:27:27.449
I don't think I need to add that much to this, though. I'm going to try to just skip it and just go and build the code and see what happens.

211
00:27:28.618 --> 00:27:32.548
I'm going to go to file and new.

212
00:27:35.278 --> 00:27:39.239
And I'm going to find okay, so a lot of options here.

213
00:27:39.239 --> 00:27:43.199
I want you to deal with a Java class, right?

214
00:27:45.749 --> 00:27:49.439
I give it a class name. I'm going to call it just exceptions.

215
00:27:52.709 --> 00:27:57.479
Same as the project name.

216
00:27:57.479 --> 00:28:02.459
Hey, and it's a class it enter.

217
00:28:03.659 --> 00:28:12.628
And it gives me a little template here for the class public class test exceptions. And this is under my source folder over here, which is where we want it to go.

218
00:28:12.628 --> 00:28:15.898
When we get into actually, you know, larger applications.

219
00:28:15.898 --> 00:28:18.929
We're using a build system called Maven.

220
00:28:18.929 --> 00:28:23.338
The intelligent, typical uses, we're not doing it here.

221
00:28:23.338 --> 00:28:31.949
But it will have a source structure that is pretty standard where you have a source folder and then you have a test folder.

222
00:28:31.949 --> 00:28:35.818
And when we do unit tests and stuff, that's where those tests go.

223
00:28:35.818 --> 00:28:44.189
Um, right now we're just going to keep the source folder. We'll build it and we'll see what happens when it shows up for that. So, let's just do a basic exception here. Um.

224
00:28:44.189 --> 00:28:51.388
We'll do a main method and Intel J. is really good about.

225
00:28:51.388 --> 00:28:59.068
Do an auto fill stuff I want to see if I can remember how to increase the size of my font. There's always a special code.

226
00:28:59.068 --> 00:29:03.628
Let's see.

227
00:29:03.628 --> 00:29:09.568
Uh, I don't remember how to increase my phone size.

228
00:29:12.118 --> 00:29:15.479
There's probably a key key sequence for it.

229
00:29:17.368 --> 00:29:23.699
But I don't remember off the top of my head right now. If I figure that out, I will get it. So you can see it right now it's kind of small.

230
00:29:25.499 --> 00:29:28.888
Okay, so I'm going to do a main method here public static.

231
00:29:28.888 --> 00:29:32.999
Void main string.

232
00:29:32.999 --> 00:29:44.459
Arts, and I'm going to open a file in this.

233
00:29:44.459 --> 00:29:50.128
Source folder, I'm going to just create a simple text file. If I go with my file Explorer.

234
00:29:50.128 --> 00:29:57.058
And I find the folder, let's see if we go to documents.

235
00:29:59.098 --> 00:30:05.818
Do you think, okay, my user ID.

236
00:30:12.058 --> 00:30:18.148
Here we go and everything's in this idea of projects test exceptions.

237
00:30:18.148 --> 00:30:22.439
Source okay, I want to create just a simple text file in here.

238
00:30:22.439 --> 00:30:25.499
With a notepad new.

239
00:30:25.499 --> 00:30:31.858
It's file and I'm just going to call it. Hello?

240
00:30:31.858 --> 00:30:35.818
Text and just put a string in there.

241
00:30:35.818 --> 00:30:43.709
Hello, right and what I want to do is read this file and just print out the contents of the file when I read it.

242
00:30:45.929 --> 00:30:51.749
Now, to read a file, if you remember, I need the scanner class.

243
00:30:53.068 --> 00:30:56.489
Java, you till scanner.

244
00:31:01.169 --> 00:31:05.219
And see, if I remember how to do this, it's going to be.

245
00:31:05.219 --> 00:31:09.808
Scanner se equals new.

246
00:31:09.808 --> 00:31:13.618
Scanner and.

247
00:31:13.618 --> 00:31:18.179
See, is it file source.

248
00:31:19.409 --> 00:31:28.739
Pass source.

249
00:31:28.739 --> 00:31:33.959
I'm trying to remember a new file.

250
00:31:36.959 --> 00:31:41.098
Hello.

251
00:31:43.888 --> 00:31:48.239
Okay, I'm kind of winging it here. Um, I'm just gonna open the local folder and.

252
00:31:49.499 --> 00:31:52.828
I get that right probably not like that.

253
00:31:57.328 --> 00:32:00.479
It's probably turning it road for a reason.

254
00:32:00.479 --> 00:32:04.949
I'm gonna have to look this up.

255
00:32:08.878 --> 00:32:16.078
Started all right. Okay. Uh, okay. Java.

256
00:32:16.078 --> 00:32:19.499
Scanner.

257
00:32:21.898 --> 00:32:27.209
We need a text file here. We go Stack Overflow.

258
00:32:28.618 --> 00:32:32.189
I just need a syntax. Okay. New file in the name of the file.

259
00:32:32.189 --> 00:32:38.189
And then scanning with the file. Okay well, that's just a little bit different. The order. I did it. Let's see what happens.

260
00:32:38.189 --> 00:32:44.219
Okay, so file, uh, file equals new file.

261
00:32:45.419 --> 00:32:54.358
Hello dot text and then down here, I'm just going to pass in the file. It's really pretty much what I did.

262
00:32:54.358 --> 00:32:57.749
He was just trying to build it and see how it goes.

263
00:32:57.749 --> 00:33:08.368
Alright, alright, I'm gonna hit Bill Bill project.

264
00:33:12.058 --> 00:33:19.439
And here we get a little status. All right. Can't find the file. All right, I'm missing an import.

265
00:33:21.028 --> 00:33:26.788
I've got to get reacquainted with intelligent, but there's a way you can just basically have it do the imports for you.

266
00:33:26.788 --> 00:33:30.269
Not coming to mind right now. I'll just do Java.

267
00:33:30.269 --> 00:33:34.108
Dot IO dot file, which I believe is where that is.

268
00:33:37.469 --> 00:33:41.939
Looks better, eh okay, so.

269
00:33:41.939 --> 00:33:45.568
Making progress here really wish I could make this fun bigger.

270
00:33:45.568 --> 00:33:48.808
Um, why is the secret key code for that?

271
00:33:54.239 --> 00:33:58.558
Troll something scroll wheels just something scroll wheel.

272
00:33:58.558 --> 00:34:05.669
Well, you'll keep playing with it's easy to figure out how to make the phone bigger because it's always the trickiest part. So I've got it almost there.

273
00:34:05.669 --> 00:34:08.938
The problem here is that to use.

274
00:34:08.938 --> 00:34:12.929
The, um, the scanner or the file.

275
00:34:12.929 --> 00:34:16.949
You have to put it in a try.

276
00:34:16.949 --> 00:34:20.219
For file not found exception, but you have to catch that.

277
00:34:20.219 --> 00:34:24.208
Or you have to throw it, you maybe you can throw an exception out of the current.

278
00:34:24.208 --> 00:34:29.639
Method if you don't want to catch it, don't want to bother with it. So I'm gonna put this into a try.

279
00:34:32.878 --> 00:34:45.119
And then we indent.

280
00:34:49.673 --> 00:35:01.974
Uh, there we go. Oh, look like what it does. Okay. I'm always amazed by intelligent by these ideas, why they do so I hit enter and it wants to continue inventing at that current level for that block. Right?

281
00:35:02.034 --> 00:35:06.893
But if I put the right brace in there, it says, oh, okay, let's back out the invitation to where it should be.

282
00:35:07.199 --> 00:35:14.458
And so that takes care of that for you, cause I'm always used to hit backspace to get rid of my invitation and Jay graphs. So, anyway, there's my try.

283
00:35:14.458 --> 00:35:22.889
And then I'm going to catch and I'm going to catch specifically we always want to try to be as specific as we can for exceptions. I could just say, catch exception.

284
00:35:22.889 --> 00:35:27.389
That's going to look for everything we're looking specifically based on this error.

285
00:35:27.389 --> 00:35:31.679
For file not found exceptions. So that's what I need a file.

286
00:35:31.679 --> 00:35:35.009
Not found exception.

287
00:35:36.179 --> 00:35:40.079
And give it a name, let's just call it. F. E.

288
00:35:40.079 --> 00:35:44.938
Well, if an f, well, not found E, for exception.

289
00:35:46.978 --> 00:35:50.969
And then what do we want to do? What we just report here we're gonna say system.

290
00:35:50.969 --> 00:35:55.048
Dot out dot print line.

291
00:35:58.048 --> 00:36:02.548
While not found, and they won't crash a program. It's a much cleaner way.

292
00:36:02.548 --> 00:36:07.259
To deal with that problem. All right. And so there's my try and catch.

293
00:36:07.259 --> 00:36:12.929
Now, everybody's used the system that add up, right? We know how to do that for output.

294
00:36:12.929 --> 00:36:16.259
Did you know.

295
00:36:16.259 --> 00:36:22.708
This is actually not this stream and there's another 1 is open for you called system dot f. E. R. R.

296
00:36:22.708 --> 00:36:26.219
Print line that stands for.

297
00:36:26.219 --> 00:36:31.978
Error sorry I really want to make this font bigger. I don't know how.

298
00:36:31.978 --> 00:36:37.168
Okay, okay. Let's.

299
00:36:37.168 --> 00:36:43.528
I'll send it back down let's go back to our Google and say, uh, intelligent.

300
00:36:43.528 --> 00:36:55.139
Increase editor font size, which is a very common search control alt f for this. See, I hate it when they make you open the settings. I just want to keyboard shortcut.

301
00:36:55.139 --> 00:37:01.588
Uh, control old s, wow. Control all this.

302
00:37:01.588 --> 00:37:05.699
I can do that control this. All right.

303
00:37:05.699 --> 00:37:09.358
Oh.

304
00:37:09.358 --> 00:37:16.648
Exactly, it says go to editor general and change font size editor.

305
00:37:16.648 --> 00:37:21.239
Here general and.

306
00:37:21.239 --> 00:37:25.648
I don't see changed font size and there's a font size.

307
00:37:28.018 --> 00:37:35.099
Hello oh, there you here. Oh, that's Holy here.

308
00:37:36.268 --> 00:37:40.469
Okay all right. Um.

309
00:37:40.469 --> 00:37:43.708
13 is that should be pretty quick. Let's go with the 20.

310
00:37:45.059 --> 00:37:48.088
Of course, we're not gonna be to fit in anything in the window. Okay. Is that better?

311
00:37:48.088 --> 00:37:53.309
Can you kind of see that? All right you want a dark background or a light background.

312
00:37:54.539 --> 00:37:58.768
Let's try it like, just to see what it looks like.

313
00:37:58.768 --> 00:38:05.128
Joel s. okay. That's going to be appearance in behavior, right?

314
00:38:05.128 --> 00:38:08.338
No.

315
00:38:08.338 --> 00:38:17.820
The downside of so they're so fricking complex now, maybe with that 1.

316
00:38:19.829 --> 00:38:24.690
Yes, oh, yeah let me find a thing. There we go. What is 10 like.

317
00:38:24.690 --> 00:38:29.280
Well, I'm running Windows 11. I can't use it intelligently.

318
00:38:29.280 --> 00:38:33.809
That is that easier or hard, which is better 1 or 2.

319
00:38:33.809 --> 00:38:39.420
Okay all right I'll do a few more and do the eye doctor thing 1 or 2, 2 or 3.

320
00:38:40.679 --> 00:38:45.150
You know, they hit you with the same 1 that they hit you with earlier in the exam, right?

321
00:38:45.150 --> 00:38:51.659
Which is better 1 or 2. okay. Which is better 2 or 3, which is better 3 or 4. and 4 is actually 1. they don't tell you that.

322
00:38:51.659 --> 00:39:00.690
But I've picked up on that, it's like there's a pattern and I can pass the test now because I know that that's the same. And no, that's as good as that 1 was before.

323
00:39:00.690 --> 00:39:07.199
I found out their secrets. Okay so I'm catching file. Not found an exception, but I need to make sure I have it up here.

324
00:39:07.199 --> 00:39:11.190
Professor Brenda likes to light round better. Okay.

325
00:39:11.190 --> 00:39:14.400
Import Java dot.

326
00:39:14.400 --> 00:39:18.539
Uh, IO file.

327
00:39:18.539 --> 00:39:23.489
Fail exception, and of course, I could just use.

328
00:39:23.489 --> 00:39:36.719
The full Java dot IO dot file not found exception here. I just like this way. It's a little better. It's cleaner to use a relative thing down here. But what I was getting at here was system dot air. This is an output stream.

329
00:39:36.719 --> 00:39:44.909
That is open along with system that out and system dynamic system. That is our keyboard. Of course. So, now that air is like a separate output stream.

330
00:39:44.909 --> 00:39:49.530
So that if you want to create a separate log file.

331
00:39:49.530 --> 00:39:54.719
Send it to somewhere else it won't go to your standard output.

332
00:39:54.719 --> 00:40:04.409
And that's the idea is that for errors, you don't really want them going out the output. You want to go somewhere else. So you can create a log, you know, a a system log, some sort.

333
00:40:04.409 --> 00:40:09.420
Or an error log and print the system dot error instead of system dot out.

334
00:40:09.420 --> 00:40:22.465
And that way, you won't get that those errors into your output street. It'll go to the air stream instead, and you can log it, you know, you can create a file to store that stuff in. Uh, but by default, it goes to the same place of system dot L.

335
00:40:22.465 --> 00:40:30.264
so, by using system of air here, we would still see this on our regular output unless we, at the beginning, changed it to point to a different place.

336
00:40:30.510 --> 00:40:36.750
When you start system dot error system, without point the same location for the output.

337
00:40:36.750 --> 00:40:42.690
And it's the standard, there's usually those 3 handles that you get on almost every programing language.

338
00:40:42.690 --> 00:40:46.349
Standard in standard out standard here, right?

339
00:40:46.349 --> 00:40:50.639
All right, so we get our exception. So now we should be able to build it.

340
00:40:50.639 --> 00:40:53.639
And it should go cleanly this time. See.

341
00:40:54.690 --> 00:41:02.550
Oh, isn't it really what? We're throwing the money corresponding try statement. Oh, because I lost my.

342
00:41:02.550 --> 00:41:08.070
Scanner or the heck scanner SC equals new scanner.

343
00:41:08.070 --> 00:41:13.260
File all right there we go and build.

344
00:41:14.610 --> 00:41:18.449
And you see ant up here and does a build tool.

345
00:41:18.449 --> 00:41:25.199
But it's using by default, uh, and you see, Java, 17 was used.

346
00:41:26.309 --> 00:41:30.300
And it's built successfully. Okay. So now I should be able to run it.

347
00:41:31.920 --> 00:41:35.099
And, you know, it's up here, created this out folder.

348
00:41:35.099 --> 00:41:41.940
And there's production and this is.

349
00:41:41.940 --> 00:41:46.650
More than likely my class file if I do properties, I seem to be properties for this.

350
00:41:47.699 --> 00:41:58.889
Uh, I don't see anything on it, but I suspect this is my class file where I put it want to build it. I, AML is an intelligent thing here. 2. successions that I know that we don't have the best with.

351
00:41:58.889 --> 00:42:02.489
All right, so let's try running it right?

352
00:42:03.750 --> 00:42:07.559
Now, here's the thing with intelligent you have to get a configuration going.

353
00:42:07.559 --> 00:42:12.030
Um, so let's see if I do a plus sign.

354
00:42:12.030 --> 00:42:16.469
And hopefully we're going to figure this out application.

355
00:42:26.639 --> 00:42:30.869
Guess I'm here there's exceptions.

356
00:42:32.820 --> 00:42:37.440
They apply see if it runs it now.

357
00:42:41.429 --> 00:42:48.210
Still incorrect, I guess, what is it missing? No program arguments.

358
00:42:48.210 --> 00:42:53.070
Run a local machine. Okay. Continue anyway.

359
00:42:55.889 --> 00:43:00.539
Okay, closed off an exception.

360
00:43:09.690 --> 00:43:16.260
Well, not founder class not fat. Okay. So.

361
00:43:16.260 --> 00:43:21.119
Where did you go to run it? Yeah.

362
00:43:25.980 --> 00:43:33.150
Yeah, yeah, huh.

363
00:43:35.699 --> 00:43:40.739
Yeah, okay.

364
00:43:43.199 --> 00:43:53.730
Uh, okay, so Here's how Here's how we can do that get around that. That's what I don't like about, uh, intelligence that configuration is really pain, but if you go to the file over here under the source folder.

365
00:43:53.730 --> 00:43:58.800
And you right click down here, you'll see run test exceptions, not Maine.

366
00:43:58.800 --> 00:44:05.639
And so just run it from there and it does run the file and you see found I found because it can't find it. So wherever was looking for that file.

367
00:44:05.639 --> 00:44:10.289
For some reason, it can't find it, so we need to figure out why it can't find the text file.

368
00:44:10.289 --> 00:44:15.539
And we'll figure that out, too, in a 2nd, but that's good. That's showing their exception is working, right?

369
00:44:15.539 --> 00:44:23.309
It's just we don't know where it's looking for that file, unless it's going to be under this production thing, but a load up text is there 2.

370
00:44:23.309 --> 00:44:28.230
Let's see where else might look for it.

371
00:44:31.139 --> 00:44:37.710
Or we just do a hard coded path. Let's do that for an hour to save time. So I'm going to go to C colon.

372
00:44:37.710 --> 00:44:43.050
Backslash users back slash.

373
00:44:43.050 --> 00:44:46.139
Um, my user ID.

374
00:44:46.139 --> 00:44:51.690
Backslash documents and I'm going to move that file into my documents folder.

375
00:44:51.690 --> 00:44:58.469
And, uh, actually, I need to do double backslash is here, because it interprets the backslash doesn't escape.

376
00:44:58.469 --> 00:45:05.789
I could use forward slash is right so go back here, I'm going to copy text.

377
00:45:05.789 --> 00:45:10.409
Up to my documents folder under my user ID.

378
00:45:11.610 --> 00:45:16.079
Paste it there and then I'll try it again.

379
00:45:16.079 --> 00:45:20.369
With the full path see how it does.

380
00:45:29.519 --> 00:45:34.710
Okay, it finished because I'm not printing out the content.

381
00:45:34.710 --> 00:45:41.550
I need to read in the file, so I'm going to do a string variable.

382
00:45:41.550 --> 00:45:44.909
Um, data equals.

383
00:45:44.909 --> 00:45:47.909
Um, let's see.

384
00:45:47.909 --> 00:45:52.829
Dot deadline okay. Which we're familiar with, right?

385
00:45:52.829 --> 00:45:56.820
This is a scanner it doesn't matter if it's coming from a file or keyboard.

386
00:45:56.820 --> 00:46:01.739
Get line will get the stream for us output.

387
00:46:03.420 --> 00:46:08.159
Data.

388
00:46:09.420 --> 00:46:14.880
Let's see how that does.

389
00:46:14.880 --> 00:46:20.789
Uh, didn't like get live.

390
00:46:20.789 --> 00:46:24.570
Next line sorry Thank you. Professor brought up? Yes.

391
00:46:28.590 --> 00:46:40.139
Not yet lined, but next 1? Yeah. Hello world finally. Okay.

392
00:46:40.139 --> 00:46:43.260
So, now we have our exceptions.

393
00:46:43.260 --> 00:46:53.280
We know that it works, because we already saw it happen, not sure where it's looking for that file somewhere down in this structure has to be a little more digging to figure out where that's coming from. And.

394
00:46:53.280 --> 00:47:01.409
We should all be familiar with this. Right? We just haven't done it. Intelligent. We've done a J grass, which is a piece of cake, but now we've done it. Intelligence. We sell the rights.

395
00:47:01.409 --> 00:47:14.159
Okay, now what I'm trying what I'm, what I'm trying to do here is present the new material, which is as of, um, uh, 7.

396
00:47:14.159 --> 00:47:19.949
They added this thing called, try with resources that you'll see in a lot of regular Java code.

397
00:47:21.150 --> 00:47:26.880
Difference is look after the try statement here. They have an expression in parentheses.

398
00:47:26.880 --> 00:47:31.889
What happens here is that this is where you're going to do something like.

399
00:47:31.889 --> 00:47:38.550
Open the file, open a network stream, open a socket and do something that could potentially fail.

400
00:47:38.550 --> 00:47:43.469
Okay all right, well, what's the difference between that? And then just, you know, the try catch.

401
00:47:43.469 --> 00:47:48.659
This will automatically deal with.

402
00:47:48.659 --> 00:47:53.369
Closing anything that got opened in that tristate.

403
00:47:53.369 --> 00:48:01.320
Because normally, when you finish, if you have errors, you have to close everything and clean up after yourself. This will do that for you.

404
00:48:01.320 --> 00:48:04.769
It will remember. Okay, I open this. I open this.

405
00:48:04.769 --> 00:48:11.190
And, oh, this thing doesn't exist or this thing failed when I tried to open. And so I'm going to close everything for you.

406
00:48:11.190 --> 00:48:16.980
And that's why you'll see these things and parentheses, which will be the declarations.

407
00:48:16.980 --> 00:48:28.284
You'll see these things on parentheses and anything that's in there that gets declared and opened in that operation will be automatically closed for you. And so this is kind of a cool feature and it's actually been around for quite a while.

408
00:48:28.824 --> 00:48:38.514
Now, the way they do this is anything that you do this operation with, in this parentheses, it implements this interface called auto closeable.

409
00:48:38.820 --> 00:48:45.210
Which says, I'm allowed to close things automatically. I don't have to have somebody call clothes on it for me.

410
00:48:45.210 --> 00:48:48.210
Okay, and so as an example of this.

411
00:48:48.210 --> 00:49:00.000
This try, we are opening a file, a zip file, which is something in the job detail that you can do, which is just a zipped up file name, a compress file. So we're opening this zip file.

412
00:49:00.000 --> 00:49:06.420
Okay declaring it is variable equals new job you till zip file with a name.

413
00:49:06.420 --> 00:49:10.860
So, we opened that we created that.

414
00:49:10.860 --> 00:49:15.719
And then we're creating this buffer writer we'll get into buffer writers. Next week we can talk about file IO.

415
00:49:15.719 --> 00:49:18.780
And so we've got the stuff that's opened up.

416
00:49:20.579 --> 00:49:27.840
After the thing in the Tri finishes, and this happens, whether it's something fails or not.

417
00:49:27.840 --> 00:49:31.380
Okay, it will close everything for us.

418
00:49:31.380 --> 00:49:43.590
So, in our basic programming course, is, we're all saying, if you open something, you got to close it, make sure you always close and in the in the industry, that's the thing, right? Because if you don't close it, you'll get into resource leaks.

419
00:49:43.590 --> 00:49:53.215
If you don't close the file and you're in the loop, and you're opening that file a 1000 times, you're going to have 1000 file handles sitting in that program that are not being used. They're taking up system resources.

420
00:49:53.215 --> 00:49:58.885
And so this is kind of the thing they put in as a protective measure, because programmers being human.

421
00:49:59.820 --> 00:50:03.809
Always well, not always, but a lot of times forgot to close up after themselves.

422
00:50:03.809 --> 00:50:10.469
And so that's the purpose of this thing. So this is to just familiarize with you with this with you so that, you.

423
00:50:10.469 --> 00:50:19.920
Understand when you see the parentheses sized expression in a try before the curly brace, that's a try with resources expression.

424
00:50:19.920 --> 00:50:27.090
Right. So, after the block inside the try finishes, the resources are closed. Um.

425
00:50:27.090 --> 00:50:30.750
And if you still need to run the catch or a, finally in there.

426
00:50:30.750 --> 00:50:34.500
It will also run those, but at that point, those things are closed out.

427
00:50:34.500 --> 00:50:46.019
You don't have to worry about dealing with those so we can do that. I think let's try this again. Kind of. We get here, but let's see if this works by doing a trial with resources in our Java program.

428
00:50:46.019 --> 00:50:51.059
So we had to do the try here.

429
00:50:51.059 --> 00:50:55.079
And here's why we are creating the scanner operation.

430
00:50:55.079 --> 00:51:02.489
Okay, and so instead of doing it down in the try, I'm going to put it here in parentheses scanner.

431
00:51:02.489 --> 00:51:09.389
Let's see, and I'm not sure scanner does auto, but we'll find out real quick when we try to do this.

432
00:51:09.389 --> 00:51:13.920
File and get rid of this.

433
00:51:13.920 --> 00:51:25.139
Inside the try, now, the syntax on this can be a little weird. Let me see if I've got it right for a single.

434
00:51:25.139 --> 00:51:32.670
Yeah, you need the semi colon inside the parenthesis here. So you see my scanner.

435
00:51:32.670 --> 00:51:38.639
Operation with the semi colon is included inside the parentheses. I took it out of the Tri statements.

436
00:51:40.289 --> 00:51:46.139
Let's see if this builds my syntax is correct.

437
00:51:51.269 --> 00:51:54.510
Intelligent build project.

438
00:51:54.510 --> 00:51:57.599
Maybe you just built it that fast. See, we can run it.

439
00:52:01.199 --> 00:52:12.750
Okay. Hey, man. All right so this is an example of travel insurance. We just moved it out of the tray statement and put it in the parentheses and we can, we can do multiple things in here. We can do as many of these as we want to.

440
00:52:12.750 --> 00:52:16.710
Separate them with a semi colon and put them in the parentheses.

441
00:52:16.710 --> 00:52:21.780
Okay, so let's try with the resources.

442
00:52:26.579 --> 00:52:30.239
Do all good on that? Pretty simple.

443
00:52:30.239 --> 00:52:36.929
Other things they added.

444
00:52:38.219 --> 00:52:45.420
When we do a catch, we can use a vertical bar. Remember the vertical bar was the logical or.

445
00:52:47.099 --> 00:52:55.590
Uh, actually, for logical those 2 vertical bars, a single logical murder party. You can do multiple exception types in a single catch statement.

446
00:52:55.590 --> 00:52:58.679
See, if I have an example here yeah, I do. Okay.

447
00:52:58.679 --> 00:53:01.980
So this is, um, here we are doing the scanner.

448
00:53:01.980 --> 00:53:10.679
And you got some stuff going on in the try, but the scanner operation is in the parentheses for the try with resources and the cash look over catching.

449
00:53:10.679 --> 00:53:13.980
I exception or input.

450
00:53:13.980 --> 00:53:22.800
Mismatch exception, and then you just give 1 variable name for either 1, whichever 1, it catches it assigned to 1. it catches. 1st, it assigns to that variable and that you can use it.

451
00:53:22.800 --> 00:53:34.320
So, if you remember from 2551 or number 1, you had, you know, layers of catch statements for all the different exceptions. You can put them all at 1, single exception. Like this.

452
00:53:35.460 --> 00:53:38.699
And then the other thing added to, this is interesting.

453
00:53:39.750 --> 00:53:46.949
Think about when you throw an exception. Okay and in your catch code, you're doing some operations with some resources.

454
00:53:46.949 --> 00:53:54.300
And what if something happens there, what, if, as you're processing in this catch.

455
00:53:54.300 --> 00:54:07.710
Another exception happens and they added this thing called get suppressed. So, those other exceptions basically well, they're probably going to crash a program, but this kind of creates an array.

456
00:54:07.710 --> 00:54:18.570
Of exceptions that if you want to say, okay, did anything happen underneath this other exception that I caught and you can declare this thing called, which is.

457
00:54:18.570 --> 00:54:24.030
Uh, basically the interface that an exception implements and you can call this.

458
00:54:24.030 --> 00:54:30.840
Get suppressed thing for this exception variable and find out if anything else happen as you were dealing with that exception when it got thrown out.

459
00:54:32.815 --> 00:54:45.534
This gives into layers of, you know, you don't want all sorts of bad stuff happening, and especially in multiples, but sometimes multiple bad things can happen. Not just 1. it's not always a simple situation. Especially in Multi, multi, threaded code.

460
00:54:45.864 --> 00:54:49.105
And so this is something that's kind of a, a good thing to throw in to catch.

461
00:54:49.380 --> 00:54:52.469
Statement to to see if anything else bad needs to be.

462
00:54:52.469 --> 00:55:04.704
Dealt with, or at least, you know, show me some information give me some information here. So, here, I've got the array that gets suppressed returns and if it's greater than a 0 length, I'm going to loop through it.

463
00:55:04.704 --> 00:55:10.675
And I'm going to say, hey, and by the way this stuff was also happening when that exception occurred. And Here's, you know.

464
00:55:10.980 --> 00:55:12.295
The stuff that you didn't see.

465
00:55:15.565 --> 00:55:26.574
Okay so this just are just some new exception features that were added in, uh, or, but most basic or 1st, job of courses don't cover, because they're kind of advanced concepts.

466
00:55:26.849 --> 00:55:35.190
All right, but again, part of the goal of this course is to show things that you might see in real Java code.

467
00:55:35.190 --> 00:55:40.530
Because the stuff we do in 200,551 and top 2800 is.

468
00:55:40.530 --> 00:55:45.960
Foundational it's like, okay, basic language stuff, but in the real world, it gets complicated.

469
00:55:45.960 --> 00:55:49.230
And so these are some of the things that you might see there.

470
00:55:49.230 --> 00:55:57.119
All right next thing to review.

471
00:55:57.119 --> 00:56:00.150
Is our land to express.

472
00:56:01.980 --> 00:56:06.179
These are our anonymous functions.

473
00:56:06.179 --> 00:56:16.139
Dynamically allocated created to run as we run programs and this was and we do cover these in 200,551 and 2100. now we.

474
00:56:16.139 --> 00:56:27.119
Just introduce these a couple years ago, but there are things that you'll see commonly in code and so you need to recognize them when you see it. There's a lot of different ways. We use them.

475
00:56:27.119 --> 00:56:33.360
But the main thing is that it's a streamlined way to do a function. So you don't have to clear separate method.

476
00:56:34.409 --> 00:56:43.829
They can be very, very simple and they're also available on C +, + and C sharp as well. So it's not just and are Python. Also. We teach them on Python too.

477
00:56:43.829 --> 00:56:50.820
Okay, and so this an example of a very simple Lambda operator where we're defining effectively a method.

478
00:56:50.820 --> 00:56:57.599
It's going to return something and we're assigning it. Um, we're giving it a name.

479
00:57:00.780 --> 00:57:04.230
There is no parameters. We're not passing anything in, but we can.

480
00:57:04.230 --> 00:57:12.360
And all it does is return, this number is kind of a hard code or return by. So no matter what you do is just going to return 1, 2 3.45.

481
00:57:12.360 --> 00:57:16.110
And it's all declared in a single line. Do I have you clear a single method for it?

482
00:57:19.289 --> 00:57:34.079
And I don't know if we still have these slides in 2551 or 2800, but I'd like to put this in. It's not a land. It is a Lambda. Okay. But they're also called closures. That's the, the formal name for them uh, anonymous inner classes.

483
00:57:34.079 --> 00:57:43.860
Not covered, there's a little bit in the FX unit. I think that they used to talk about in that. An anonymous in her class is basically in a Java program.

484
00:57:43.860 --> 00:57:47.489
Uh, you know, we've got this class here test exceptions.

485
00:57:47.489 --> 00:57:51.449
And down here somewhere, I might have a.

486
00:57:51.449 --> 00:57:56.010
Class that does something. It's just braces. There's no name for it.

487
00:57:56.010 --> 00:57:59.639
We do it for a lot of event handlers and things like this.

488
00:57:59.639 --> 00:58:12.059
I can show an example from FX, but it's anonymous and it's like writing code in here that's treated as a class is compiled, like a class. But as a model as it has no name, and we can access methods and stuff in that.

489
00:58:14.519 --> 00:58:25.019
So, anyway, that's similar to that. And the main important criteria for Atlanta expression is that we use single access methods. Sam.

490
00:58:25.019 --> 00:58:28.829
Interfaces the interface that you implement a Lambda with.

491
00:58:28.829 --> 00:58:35.070
Can only have 1 method, has to have 1 method, but no more than 1 method. It has to be non.

492
00:58:35.070 --> 00:58:41.070
Uh, ambiguous in terms of what it does for the execution and so we call them interfaces.

493
00:58:41.070 --> 00:58:48.119
Single abstract method, uh, you notice here this is a wall, but not Orlando so that's why, but.

494
00:58:48.119 --> 00:58:54.239
Thanks right there. So it's an interface. It contains a single method. They're very simple.

495
00:58:54.239 --> 00:59:01.800
Okay, when we get into multiple threaded applications, we will look at the Runnable interface. This.

496
00:59:01.800 --> 00:59:04.949
Runs a thread of execution.

497
00:59:04.949 --> 00:59:08.880
And the interface is called Runnable and there's 1 method run.

498
00:59:08.880 --> 00:59:12.210
And we can create land to expressions with this interface.

499
00:59:12.210 --> 00:59:19.650
Okay, so it's a Sam or single abstract method interface and again we get to multi thread and you'll see examples of this.

500
00:59:19.650 --> 00:59:26.039
So, simple example, this class Lambda tester.

501
00:59:26.039 --> 00:59:31.320
I am declaring a, uh, an instance of an interface now.

502
00:59:31.320 --> 00:59:39.510
Down here is the interface interface simple cost it. What does this do? It? Does a method called get value that returns a double.

503
00:59:39.510 --> 00:59:44.789
The implementation is left, left up to whoever implements the.

504
00:59:44.789 --> 00:59:48.360
Interface okay. And remember.

505
00:59:48.360 --> 00:59:53.010
Normally, when you declare an interface, you have to say, implements.

506
00:59:53.010 --> 00:59:56.730
For your class, right? Implement the interface but you don't see that here.

507
00:59:56.730 --> 01:00:02.550
What you do see is an actual declaration of a reference we're able to that interface.

508
01:00:03.659 --> 01:00:08.789
Which is okay, well, there's nothing there. I mean, this is not doing anything. It's an abstract.

509
01:00:08.789 --> 01:00:13.739
Method, so how can we do that? Well, you have to give it an implementation.

510
01:00:13.739 --> 01:00:18.630
And so here we are saying, okay, simple cost is a method.

511
01:00:18.630 --> 01:00:22.800
That returns it double, it is called get value.

512
01:00:22.800 --> 01:00:26.909
So, simple costs that here, we're declaring a land to expression.

513
01:00:26.909 --> 01:00:35.070
That says, okay for this interface that get value method is always going to return 1, 2, 3, 4.4 or 5.

514
01:00:35.070 --> 01:00:38.340
And then we can use this as.

515
01:00:38.340 --> 01:00:46.590
An object basically to call the method with and we print out a simple costs, equals dot get value, which is going to return.

516
01:00:46.590 --> 01:00:56.250
123.4 or 5, not really exciting, but it's just demonstrating how simple these can look. The Landa operator is the hyphen and the right arrow.

517
01:00:56.250 --> 01:01:00.630
Okay, this is the return value if you have parameters will go in here.

518
01:01:02.400 --> 01:01:07.440
So, if we do this, let's just throw this in and run it in a separate class here.

519
01:01:07.440 --> 01:01:11.309
See, how fast I can do this intelligent.

520
01:01:12.420 --> 01:01:15.750
I'm going to add a class here.

521
01:01:15.750 --> 01:01:19.500
New Java class.

522
01:01:21.090 --> 01:01:28.260
And it's called, let him do tester and I'll just plug in the code.

523
01:01:28.260 --> 01:01:31.679
Nope, that's not going to work because it's come up with a slide. Yeah.

524
01:01:34.139 --> 01:01:39.210
You see, we can paste just the text.

525
01:01:44.429 --> 01:01:52.289
Uh, do we have an option to paste text? Special, plain text. There we go no, it's still not working. It's still got the weird character set. It.

526
01:01:52.289 --> 01:01:56.699
Shoot, let's go here.

527
01:01:57.780 --> 01:02:04.110
It's good a word and then copy it from there. So you can put it in there.

528
01:02:10.019 --> 01:02:15.929
Okay, that looks better. All right. And.

529
01:02:17.099 --> 01:02:22.380
Run it run name to test remain see what we do here.

530
01:02:22.380 --> 01:02:26.340
All right and there we are simple concept 1, 2 3.4 or 5.

531
01:02:26.340 --> 01:02:31.199
So, simple concept, and as you get value as defined by this.

532
01:02:31.199 --> 01:02:38.880
Returns 123.45, and then we can redefine it here if we want to as the program executes.

533
01:02:38.880 --> 01:02:43.320
And it will return 6, 7, 8.

534
01:02:43.320 --> 01:02:47.909
Point 9, this is to do that.

535
01:02:47.909 --> 01:02:51.780
And then print it out again with the same.

536
01:02:51.780 --> 01:02:55.769
I'll be preference in the same method call.

537
01:02:58.380 --> 01:03:08.099
And you can see, we've redefined the behavior of that method just by changing.

538
01:03:08.099 --> 01:03:19.230
The Lambda expression was declared, so these are intended to just be quick and dirty on the fly methods that you don't have to do the formal declaration formal syntax for.

539
01:03:22.710 --> 01:03:26.250
And they can change their values as a.

540
01:03:26.250 --> 01:03:33.059
So the methods to find, uh, Lambda expressions, have no name.

541
01:03:33.059 --> 01:03:44.519
Um, well, no, we just kept it just kind of get value. Okay the functional interface the Sam interfaces the target type. This is all just the basic.

542
01:03:44.519 --> 01:03:47.670
Kind of the academic definition of lamb does.

543
01:03:48.750 --> 01:03:54.809
Compile it treats it like, it's an object instantiated from that anonymous inner class thing.

544
01:03:54.809 --> 01:04:02.909
And it takes these steps to process it. It looks at the target type the parameters and in the statements that are in there.

545
01:04:02.909 --> 01:04:06.329
Um.

546
01:04:08.039 --> 01:04:16.079
And here's the thing if you do the wrong type, right? This is this interface. Remember back up here returns a double.

547
01:04:16.079 --> 01:04:23.820
Does he expected behavior so down here instead of returning 1 to 3.45, we're trying to say it returns a string test.

548
01:04:23.820 --> 01:04:36.449
But you see, the compiler won't let you do that, I'll say, no, that's not compatible because it's supposed to be a double. So why don't you do anything wonky with it right here if you're trying to do something different in the application, as it executes.

549
01:04:38.940 --> 01:04:46.980
And again, these are dynamic. So, here we got interface show string that's going to show a string. We pass a string in. It doesn't return anything.

550
01:04:46.980 --> 01:04:50.429
Okay, and then so in my program, I declare.

551
01:04:50.429 --> 01:04:56.849
A reference to that interface and I'm going to test string here.

552
01:04:56.849 --> 01:05:03.030
And then I create a Lambda out of it. So s. S. is just my show string object reference.

553
01:05:03.030 --> 01:05:06.690
S is, um.

554
01:05:06.690 --> 01:05:16.409
Just a name, we give the parameter and this is dynamic. You can call it. Whatever you want to is expecting you to pass in a string.

555
01:05:16.409 --> 01:05:23.789
You don't have to call it s even though we declare it as this up here you call it whatever you want. But here we're saying, okay, the parameter that we're passing into that method.

556
01:05:23.789 --> 01:05:27.179
It expects a string is gonna be called s.

557
01:05:27.179 --> 01:05:31.170
And we're going to print out s and so we're defining the behavior of show stream.

558
01:05:31.170 --> 01:05:37.050
Based on this Lamda, we're going to say whenever you call that Lambda that method in the Lambda.

559
01:05:37.050 --> 01:05:42.630
Print out whatever s is and then we do SS, which is Orlando.

560
01:05:42.630 --> 01:05:46.949
Dot show string the method and then we pass in this test string.

561
01:05:48.150 --> 01:05:52.469
And executes this code to produce the word test.

562
01:05:54.869 --> 01:06:06.655
And then I changed the definition of the Lambda now. I don't want it just to print out the string. I want to print out a prefix variation on show stream, and then print out the string parameter and we call it again and now it prints out variation.

563
01:06:06.655 --> 01:06:10.675
On so you see, it's changing his behavior.

564
01:06:10.920 --> 01:06:14.280
As we execute the program for that interface.

565
01:06:15.929 --> 01:06:21.869
And then we get into the parameters and parameters can get interesting syntax kids kind of weird.

566
01:06:21.869 --> 01:06:27.030
Um, for this 1, our interface is called simple double.

567
01:06:27.030 --> 01:06:32.400
We're turning a double and we're passing in a double. The function of the method name is called double value.

568
01:06:32.400 --> 01:06:35.489
So, declare a reference to that interface.

569
01:06:35.489 --> 01:06:50.489
As an object reference, and then we create the Lambda the parameter. We're going to call it Val. And again, we can call it. Whatever we want to is taking it here is D, but we're calling it value here. You can change to whatever as long as it's a double that's all that matters.

570
01:06:50.489 --> 01:06:54.659
And they were saying, okay, so this function, this method is going to return.

571
01:06:54.659 --> 01:06:58.050
The value doubled, that's our definition of it right there.

572
01:06:58.050 --> 01:07:01.889
And then printed out and you see SD dot double by we pass and a double.

573
01:07:01.889 --> 01:07:05.070
Okay, so this is pretty simple for the parameters.

574
01:07:10.079 --> 01:07:13.110
We can, um, add more stuff to it.

575
01:07:13.110 --> 01:07:22.050
For this, uh, and we can also make it as a explicit as we want. So, this is what I just did, right? The parameter we called, Val that's being passed in.

576
01:07:22.050 --> 01:07:34.230
At all times too, if you want to be a little more explicit, okay. Put in parentheses rapid you may really explicit. Yeah. It's a double that's what it's expecting. And so this is all exactly the same thing, but you can see how.

577
01:07:34.230 --> 01:07:41.579
Abbreviated, we can make it if we want to. Now, if you have multiple statements.

578
01:07:41.579 --> 01:07:45.030
Then you need the curly braces, just like it's a 4 loop, right?

579
01:07:45.030 --> 01:07:56.550
You have to have braces around so, in here, we're multiplying by 2 and then we're turning Val, which is exactly what this does. This is just a different way to do it, but there's 2 statements.

580
01:07:56.550 --> 01:08:05.460
And so we have the semi colon terminated statements inside the braces, and you have to have a semi colon after that just like we have up here.

581
01:08:05.460 --> 01:08:11.610
Because braces, normally, you don't have a semi colon after it, but now we do is kind of an exceptional syntax there.

582
01:08:20.130 --> 01:08:34.649
When you get into multiple parameters, then you have to put parentheses around. So here are multiplier interface. We've got a method called multiply or passing to editors and multiplying together. Pretty simple. And we return the editor product of those.

583
01:08:34.649 --> 01:08:38.220
Okay, and Orlando is.

584
01:08:38.220 --> 01:08:45.779
It's called M, the parameters are the 2 managers, but we have to have parentheses around it because there's 2 now.

585
01:08:45.779 --> 01:08:51.000
Land expression and then, do we need the curly braces? I.

586
01:08:51.000 --> 01:09:01.829
Don't I'm not sure we can try it without. So there's only 1 statement in here, right? It might work without but because of the parentheses parameters that might require, let's put that in there and see if we can get that.

587
01:09:01.829 --> 01:09:07.829
Um, see yours that way or not. Let me put my interface in there.

588
01:09:10.260 --> 01:09:15.239
So, I'm going to do over here I'm going to go to new.

589
01:09:16.920 --> 01:09:20.819
Job class laptop.

590
01:09:20.819 --> 01:09:24.180
And.

591
01:09:24.180 --> 01:09:31.050
And a multiple.

592
01:09:32.550 --> 01:09:37.859
Okay, I'm put my interface up here. I'm not gonna make it public.

593
01:09:37.859 --> 01:09:41.939
What everybody just do paste text.

594
01:09:41.939 --> 01:09:47.310
Still wants those get rid of it.

595
01:09:48.569 --> 01:09:54.449
Okay here. Okay. I think they cleaned it up.

596
01:09:54.449 --> 01:09:57.630
Here's my interface or my yeah, my interface.

597
01:10:00.930 --> 01:10:04.380
Curly braces.

598
01:10:04.380 --> 01:10:08.460
And then our class is doing the multiplier down here.

599
01:10:11.250 --> 01:10:16.409
So, public static.

600
01:10:16.409 --> 01:10:23.550
Main string ours.

601
01:10:31.020 --> 01:10:38.189
And I'll paste that in. All right so declare parameters expression.

602
01:10:38.189 --> 01:10:42.510
Let's get it working for us and we'll test that if we need those braces or not.

603
01:10:44.939 --> 01:10:48.750
Yeah, I'm trying to get to it before. I do, um, random multiplier run this.

604
01:10:53.010 --> 01:10:56.699
All right, so there's my multiplication. So now the question was.

605
01:10:58.079 --> 01:11:05.760
Do we need to brace it? Cause? It's a single statement. I don't.

606
01:11:05.760 --> 01:11:12.779
Well, okay, let's do this. 1st, jump on something else. Um, turn it red. It looks like it might not like that.

607
01:11:12.779 --> 01:11:18.239
Yeah, illegal startup expression does it need the return statement even though.

608
01:11:25.800 --> 01:11:30.449
Nope okay. So quirks in the syntax of this.

609
01:11:30.449 --> 01:11:37.170
With the parameters it.

610
01:11:37.170 --> 01:11:47.130
Was okay with the braces for the return statement, but if you took the braces off, it didn't like it with the return statement but you don't need the return statement. I mean, it's assuming it knows.

611
01:11:47.130 --> 01:11:51.539
This is a single access, um, method or single abstract method.

612
01:11:51.539 --> 01:11:54.810
Uh, is going to return 1 thing and.

613
01:11:54.810 --> 01:12:08.729
The compiler is smart enough to know that all I can do is multiply and return this product. That's what it's supposed to do. And so that's what it does. So, you see that these can get kind of cryptic, but they're also more efficient in terms of just writing this stuff dynamically as you go.

614
01:12:10.500 --> 01:12:17.939
What happens a lot is that okay, you've tested this thing out and then you actually put it in the phone. I said, later to make sure that, you know, it's kind of, um.

615
01:12:20.250 --> 01:12:26.909
In written in stone, you know, versus just keeping us alanda. It really depends on how complicated it is.

616
01:12:31.409 --> 01:12:38.189
What happens we try to find a land on a non Sam interface in other words, if there's more than 1 method in the interface.

617
01:12:38.189 --> 01:12:41.729
Well, it gets confused.

618
01:12:41.729 --> 01:12:54.449
And here, it's saying, it's not a functional interface and again, a functional interface is a or a single abstract method interface. You can't have more than 1 method in there if you want to create a lamp out of it. Okay, so that's the rules for Java.

619
01:12:55.590 --> 01:13:02.159
Might be different for other languages. Okay, so that's the review material and, uh.

620
01:13:02.159 --> 01:13:05.520
A little bit of extra content any questions on that stuff.

621
01:13:07.289 --> 01:13:12.600
My gosh at 730 already. Okay. Let's take a break.

622
01:13:12.600 --> 01:13:18.090
For about 10 minutes and come back and see how we can do with the practice exercise.

623
01:13:18.090 --> 01:13:32.909
And then we'll get you on your way. So okay, so in canvas, you want to go to the.

624
01:13:32.909 --> 01:13:39.720
There's both get and get have assignment, which again is just kind of a reference thing, but then the greater assignment.

625
01:13:39.720 --> 01:13:45.000
We want to go to the link here and accept the assignment and that will put you in the classroom.

626
01:13:46.470 --> 01:13:56.100
They'll say, select yourself from the list below or skip to the next step and you want to skip to the next step if you're not on the list and then it puts you in the classroom. So now I'm going to look in the classroom.

627
01:13:56.100 --> 01:14:02.310
And just see where everybody is. Hopefully they're all in the classroom.

628
01:14:05.729 --> 01:14:09.960
Refresh let's see.

629
01:14:12.210 --> 01:14:17.220
See, I put the okay.

630
01:14:17.220 --> 01:14:20.640
Uh, let's look at the classroom here. Yeah.

631
01:14:20.640 --> 01:14:27.989
I have to.

632
01:14:32.760 --> 01:14:39.479
Hmm. Okay. I'm like, oh, there we go. Okay. Yeah, Nicholas, I've got you link to students.

633
01:14:47.069 --> 01:14:51.210
Uh, I think I didn't know what I need to do here. Let me go to students.

634
01:15:07.885 --> 01:15:11.364
Yeah, so okay my add show and see if this works Joe.

635
01:15:15.119 --> 01:15:20.970
Okay, ad, roster entrance. Alright now, Joe got you and I'm going to link.

636
01:15:20.970 --> 01:15:24.359
Your things thing, right? Okay.

637
01:15:24.359 --> 01:15:29.130
I'll let you slide on that for now. Let's try to change it.

638
01:15:33.390 --> 01:15:38.819
Yeah okay. Who's OCC links too?

639
01:15:38.819 --> 01:15:45.659
Okay, I'm gonna I'm gonna put you in here.

640
01:15:46.710 --> 01:15:52.800
Okay, so I'm going to go to my I'm going to let a recording this. I can go look at it myself.

641
01:15:52.800 --> 01:15:57.270
All right, so I'm going to add, okay, I'm gonna add Nicholas next cause he goes next on the list.

642
01:15:57.270 --> 01:16:04.260
Simpson, uh, and I've seen me do 2 at a time here. Uh.

643
01:16:04.260 --> 01:16:08.760
Hello.

644
01:16:11.939 --> 01:16:16.680
Yes, okay. So these.

645
01:16:16.680 --> 01:16:22.319
All right now I go and I linked the account. Nicholas is okay, well, that's pretty obvious there.

646
01:16:22.319 --> 01:16:27.090
Yeah, and then OCC links what is OCC links.

647
01:16:34.380 --> 01:16:37.710
Oh, okay, okay.

648
01:16:38.760 --> 01:16:51.630
All right, Gustavo where are you? Oh, I got an unlink account. Let's see.

649
01:16:51.630 --> 01:16:55.800
Gustavo, I see you now, right?

650
01:16:55.800 --> 01:17:01.229
Update students and you stop.

651
01:17:01.229 --> 01:17:14.489
Okay, and then I link you're the only 1 left so that's got to be you and there we go. All right, so I see in the classroom that's good.

652
01:17:14.489 --> 01:17:21.720
Now, has it created a repository yet? So it was saying I was working on it right? Refresh your page. What do you see.

653
01:17:26.250 --> 01:17:30.119
Do you see files? Okay do you see the read me?

654
01:17:30.119 --> 01:17:42.869
Welcome to read me how you're in the getting get up. I want you back into the module 1 assignment.

655
01:17:42.869 --> 01:17:46.949
I was like, that's not what I put in the.

656
01:17:48.534 --> 01:18:02.664
Really should have the instructions for the assignment no,

657
01:18:03.654 --> 01:18:04.885
but the module 1 assignment.

658
01:18:05.159 --> 01:18:10.079
Yeah, okay so the read me.

659
01:18:12.180 --> 01:18:20.789
There's nothing in there. Okay, let me see, wait 3 months.

660
01:18:20.789 --> 01:18:25.350
All right maybe I didn't put it in there. Oh, let me go. Look.

661
01:18:30.779 --> 01:18:35.399
Yeah, or is that the read me file or is it no, there's an instructions document.

662
01:18:35.399 --> 01:18:39.840
There's an extract a word document look at your files again. You see a word document in there.

663
01:18:42.750 --> 01:18:50.430
I think you put it in a word document, let's go to.

664
01:18:57.479 --> 01:19:01.470
Practice yeah.

665
01:19:05.399 --> 01:19:09.180
So, I'm going to the the repository now.

666
01:19:10.890 --> 01:19:17.220
Call when you put on the 1st yeah.

667
01:19:17.220 --> 01:19:20.699
That's a word document. Can you get to it? Can you open it and click on.

668
01:19:20.699 --> 01:19:24.359
What did you download it?

669
01:19:24.359 --> 01:19:28.260
Okay, okay, well, what we want to do.

670
01:19:28.260 --> 01:19:35.310
Is we want to create a local repository and it shouldn't bring that down anyway? Yeah. That's what we're looking for. Okay. Good.

671
01:19:35.310 --> 01:19:40.409
So, let's when you come back, just I'll, I'll show you.

672
01:19:41.489 --> 01:19:49.770
Okay.

673
01:19:49.770 --> 01:19:55.979
The module 1.

674
01:19:58.260 --> 01:20:03.779
Module 1.

675
01:20:06.090 --> 01:20:12.029
The last month the upgraded for every time.

676
01:20:20.640 --> 01:20:26.579
Okay, so go on there.

677
01:20:26.579 --> 01:20:32.699
All right, so we want to do is we want to create a local repository and we want to clone that.

678
01:20:32.699 --> 01:20:40.079
So, you can work on it locally right now, what do you want to do on the classroom system? On your laptop? On Verizon?

679
01:20:40.079 --> 01:20:48.689
I'm going to do it on horizon, but because I'm not a student, it's gonna be a little bit different experience here. So we'll see how that works.

680
01:20:50.609 --> 01:20:56.729
So, I'm going to go to the command line and where do we want to put it? Well, that's up to you. I'm going to go to my.

681
01:20:56.729 --> 01:21:00.449
Um, documents, folder again, users.

682
01:21:00.449 --> 01:21:03.750
The user ID, and this is on the horizon.

683
01:21:03.750 --> 01:21:10.529
Documents Kay, so.

684
01:21:10.529 --> 01:21:15.539
Here's the thing, I'm not sure of.

685
01:21:15.539 --> 01:21:23.939
I'm not sure if I need to initialize a local repository and then clone it or if I just clone it and it's going to create the repository for me.

686
01:21:23.939 --> 01:21:27.840
Because I haven't done enough Git on that. So I'm going to go with.

687
01:21:27.840 --> 01:21:38.909
Clone for now, now I need the URL, which you should have, you're gonna have your own private repository right? So you have a URL for that. I'm going to use my repository.

688
01:21:38.909 --> 01:21:45.899
So, I'm going to find it. What are you doing to be here?

689
01:21:48.779 --> 01:21:53.310
It's going to get her up.

690
01:21:58.079 --> 01:22:02.850
All right, so here is this this 1.

691
01:22:03.930 --> 01:22:07.109
So, I've got my URL and I'm going to grab that.

692
01:22:12.899 --> 01:22:18.390
You're not in the URL, so you just copy it. So we're in here, I can copy the URL.

693
01:22:20.399 --> 01:22:24.300
So, there we go, thank you. All right.

694
01:22:24.300 --> 01:22:34.680
Usually, it's going to be different, you're not going to use the same 1, right? Because you got your own repository for this and I'm gonna do paste it in here and see how this works.

695
01:22:35.909 --> 01:22:39.689
Okay, so now I've got the repository.

696
01:22:42.750 --> 01:22:47.460
And is this actually a repository get status?

697
01:22:48.479 --> 01:22:59.760
Okay, branch master. Okay. So it says it created the repository so, you know, if you're doing an empty repository, you do get a nit dot.

698
01:22:59.760 --> 01:23:02.819
For the current folder, it makes your poster this empty there.

699
01:23:08.789 --> 01:23:15.359
This is how you can do it, you can clone it so I cloned it from that URL. So if you're in your repository.

700
01:23:15.359 --> 01:23:28.229
You can go to like Nicholas said, you have a code drop down copy that URL means you say Git space, clone space URL, and it will clone onto your system. And now I've got a repository. I've got the working folder where I can do my work.

701
01:23:28.229 --> 01:23:31.710
Okay, now if I modify something, for instance.

702
01:23:31.710 --> 01:23:37.050
This is the upgraded practice exercise solution, which we need to look at still. But, um.

703
01:23:37.050 --> 01:23:41.340
Let's look at the instructions here. I've read the word document up somewhere.

704
01:23:41.340 --> 01:23:52.289
No, but we want to upload those changes after you modify locally, right?

705
01:23:52.289 --> 01:23:55.739
Because again, if you're on horizon or the classroom systems, you're going to lose it.

706
01:23:55.739 --> 01:23:59.789
When you leave here, so you want to make sure you get a load it up. Okay. So, um.

707
01:24:01.890 --> 01:24:07.619
So Here's a practice exercise. We're gonna design and implement a program uses a Lambda.

708
01:24:07.619 --> 01:24:15.750
To implement a Sam interface with a method that sums up the elements of an array. So here's the interface here. It's called erase summer.

709
01:24:15.750 --> 01:24:19.470
And the method is summer returns an ENT.

710
01:24:19.470 --> 01:24:23.250
And it takes an energy array as a parameter. Okay.

711
01:24:23.250 --> 01:24:27.060
And so, um, we're going to.

712
01:24:27.060 --> 01:24:36.029
Do a simple test, create an array with just simple managers in it and test that summer land expression then we're going to read a.

713
01:24:36.029 --> 01:24:44.640
Csv file that has the data and add up the values and the CSV file with a separate class. Now, the separate class can just be in.

714
01:24:44.640 --> 01:24:47.729
The same file as you're.

715
01:24:47.729 --> 01:24:56.670
Other class that does the land expression, and I'll show you how to do that. If you don't remember from 2551, you can only have 1 public class in a source file.

716
01:24:56.814 --> 01:25:08.904
Okay, but you can have as many other classes as long as you're not public and so for us to keep it simple, we don't need to create a bunch of separate class files. We're just gonna put it right in the same file as our main class here. The output is going to look like this.

717
01:25:08.904 --> 01:25:19.225
Okay so given this array, it adds up it's 25 given this array as well. This is where it read in the CSV file. So the CSB file is here in the repository. It's very simple type.

718
01:25:19.949 --> 01:25:26.909
Managers the CSV. Okay. And it's just got the same numbers. I have my test rate. So if you look at the code.

719
01:25:26.909 --> 01:25:32.369
Open that was, um, watching a jigger here. Um, uh.

720
01:25:32.369 --> 01:25:41.970
Intelligent can't remember his name file open and let's see what it does with that file cause it's probably going to move it somewhere or copy it.

721
01:25:41.970 --> 01:25:49.380
Uh, users, ideally, I would start intelligent from inside that.

722
01:25:49.380 --> 01:25:52.529
Repository and work from there.

723
01:25:52.529 --> 01:25:58.020
Um, we've got what we got, we have documents.

724
01:25:58.020 --> 01:26:02.520
And the repository and the Java file.

725
01:26:02.520 --> 01:26:12.300
Okay, so there is the file so this is the solution to the practice exercise that I give you.

726
01:26:12.300 --> 01:26:16.619
And now I want to make my font smaller, but I got to go in and change this.

727
01:26:16.619 --> 01:26:25.079
I don't want to do that. So here's the interface at the top. Now. Look what intelligence does it collapses? The import statements they're there.

728
01:26:25.079 --> 01:26:30.810
You can expand them, but to save space, it just puts the little ellipses there. So don't.

729
01:26:30.810 --> 01:26:35.369
Think remove my imports. No, they're still there. You just have to expand it to see it.

730
01:26:35.369 --> 01:26:38.460
Okay, so I'm importing the scanner.

731
01:26:38.460 --> 01:26:42.449
Importing your raise in reporting you to Ray list.

732
01:26:43.829 --> 01:26:50.430
Right so Here's my test. Ray, this is the thing I want to test with to make sure the land works before I read in for the file.

733
01:26:50.430 --> 01:26:59.640
That way I know the land is working and if a problem occurs in the file, and here's my land of expression. So.

734
01:27:00.810 --> 01:27:06.029
Every summer is declared the object, the variable names Aes for a race summer.

735
01:27:06.029 --> 01:27:09.869
And I'm passing in a parameter. It's an array.

736
01:27:09.869 --> 01:27:18.989
And call it whatever I want based on the interface, I just know it's capacity or right this is the imager wrapper outage right now the printers you can't store perimeters in an array list.

737
01:27:20.640 --> 01:27:24.239
Okay, so I'm passing in a ray of managers and.

738
01:27:24.239 --> 01:27:29.939
My son variable, right? The accumulator everybody remembers that hope.

739
01:27:29.939 --> 01:27:37.229
All right. Accumulators top 1000. okay. And I do a simple for each loop.

740
01:27:37.229 --> 01:27:46.229
I'm looping through each element as a manager, and I'm adding it to the sub and then I would try this out. So, my land is a little is not 1 of the simple 1 liners.

741
01:27:46.229 --> 01:27:49.619
But it is, you know, dynamic created here.

742
01:27:49.619 --> 01:28:02.340
And so I'm going to use this as the object and then I do a print so print the sum of and I use the erased class here and I imported that. So I don't have to use the full class. I'm getting rid of this.

743
01:28:04.590 --> 01:28:08.939
I used your raise class just to print out the array. So I see. So I see the contents.

744
01:28:08.939 --> 01:28:15.359
Using the 2 string method I pass that array in there. And then here's my Lambda as dot summer.

745
01:28:15.359 --> 01:28:19.619
And I pass you right and it prints out this up, or should print on the side.

746
01:28:19.619 --> 01:28:22.649
So, assuming this works correctly.

747
01:28:24.960 --> 01:28:38.489
Then I go down here and now I'm going to create a class that reads in from a CSV. Csv has comma separated value very common. Okay and they have a, um.

748
01:28:38.489 --> 01:28:44.100
Uh, the CSV readers a class I'm creating down here.

749
01:28:46.829 --> 01:28:51.449
And there's a method, uh, there's a, I'll show you how to do that.

750
01:28:51.449 --> 01:29:01.859
It's not really a class for that. I created a class read for the CSV file, this manages CSV files. Okay. And this method I passed in the file name.

751
01:29:01.859 --> 01:29:11.340
And I return on a ray list of strings, because that's what it reads in from a CSV file. No matter what data type is there. You're going to get a string then you need to convert it to numbers later.

752
01:29:11.340 --> 01:29:17.159
Okay, so I read in a string. No, I clear a token. A token is just a.

753
01:29:17.159 --> 01:29:23.279
A piece of data, so it's a comma separated value file. So every token is going to be the thing that extracts this.

754
01:29:23.279 --> 01:29:32.369
Separated by the Congress, each value that extract is called a token. So common phrase, when we parse the file, we extract tokens from it.

755
01:29:34.619 --> 01:29:40.560
Now, because I need the, the, the scanner here to read the file, I have to put it in a try.

756
01:29:40.560 --> 01:29:43.979
A new scanner with a file name.

757
01:29:43.979 --> 01:29:49.590
And here's the thing that I can do with the scanner, the scanner provides this delimiter.

758
01:29:49.590 --> 01:30:00.060
So, if you want to separate tokens by a specific delimiter, what should be a tab it could be a dot. In this case it's common cause it's the most common 1, then it's saying, okay, so when you read this file.

759
01:30:00.060 --> 01:30:05.850
Read in the tokens that are defined by the, the Congress.

760
01:30:05.850 --> 01:30:09.720
They're separate and then we have this has next.

761
01:30:09.720 --> 01:30:13.920
Method which says is their data is still to read.

762
01:30:13.920 --> 01:30:21.539
Okay, while not in the file basically, is what it's saying. So, while there is some data in to read from the scanner.

763
01:30:21.564 --> 01:30:34.404
Get the next token, is there a reason in this terms in the string and then I'm adding it to my realist remember the ad method for the array list. You just add it there and that's all. You gotta do to add it to this.

764
01:30:34.704 --> 01:30:40.494
So, now I'm adding each integer object to this array. There's actually string objects right now, because that's I was reading them in.

765
01:30:40.770 --> 01:30:49.680
And then I close my scanner and if there's an exception, I'm not really doing anything, but I got to catch it anyway. So it's there.

766
01:30:49.680 --> 01:30:55.079
Okay, and then I return the re list and so this will read that CSV file.

767
01:30:55.079 --> 01:31:04.770
And return a bunch of strengths I also declared another class down here because I need to convert the string tokens to editors.

768
01:31:04.770 --> 01:31:09.239
And so this number collection class again, it's not public so I can put it in the same file.

769
01:31:09.239 --> 01:31:16.199
I'm declaring an method called 2 array, which takes that array list of strengths.

770
01:31:16.199 --> 01:31:22.140
And it returns an array of editors. Okay. I get a size of the Ray list.

771
01:31:22.140 --> 01:31:26.340
I declare an array of that size.

772
01:31:27.600 --> 01:31:32.970
And then I just do a simple loop with an index move through each element of that array list.

773
01:31:32.970 --> 01:31:38.399
And I'm using energy to parse, which will extract the manager from a string.

774
01:31:38.399 --> 01:31:53.399
Remember each token is a string and parse it is a little more forgiving in terms of if there's white space around it or some other stuff, it'll pick it out of there. Okay this should be clean. In fact, I know it's clean because I created the data file and so you just see, I'm.

775
01:31:53.399 --> 01:31:59.548
Adding to this array and using that index increment the index as I looped through each item to add to theory.

776
01:32:01.198 --> 01:32:04.469
And if the part that fails, you get this number format exception.

777
01:32:06.479 --> 01:32:12.448
Okay, and so when I'm done here, I've got this IRA object, which is in array of managers.

778
01:32:12.448 --> 01:32:17.998
And I returned that, so I've converted that string array list to an array.

779
01:32:17.998 --> 01:32:21.448
Because that's what my.

780
01:32:21.448 --> 01:32:33.719
Erase summer, once as a parameter and now I can call it with an array. So, here I declare the array list of strings, and I use a CSV reader to read the file and there's the file.

781
01:32:33.719 --> 01:32:42.509
And then I create the array by calling and these are all static. So I just use a class name here. Right? Csb reader.

782
01:32:42.509 --> 01:32:53.609
Number collection, and then 2 editor array I pass the Ray list in and I get back the array of managers and I just print. I'm just like, I did before this again, because I don't need it.

783
01:32:53.609 --> 01:33:07.798
2 string to show the contents and as summer, and I should get exactly the same results because the contents of this file are the same as this array that I prepared here to test and so run this that I run it already. I don't know.

784
01:33:09.389 --> 01:33:12.719
Uh, and I don't run that run this 1. okay.

785
01:33:14.819 --> 01:33:23.519
And there's something out there we get to it. No, that's the wrong thing, ran the wrong programs because I don't have this in my project.

786
01:33:24.929 --> 01:33:31.828
Uh, how do I add this to a project? Where is that file? Let's see. Let me just add it.

787
01:33:31.828 --> 01:33:36.748
Add add on, add it to my projects.

788
01:33:36.748 --> 01:33:40.979
Not letting me do it. Oh, wait.

789
01:33:40.979 --> 01:33:49.078
My favorites.

790
01:33:50.548 --> 01:33:54.328
Okay, this is really smart. I'll just drag and drop it into source.

791
01:33:56.069 --> 01:34:00.779
Nope, Jag jump off into org at all.

792
01:34:00.779 --> 01:34:06.298
No, okay.

793
01:34:07.408 --> 01:34:12.088
Who's asking for a J grasp?

794
01:34:15.059 --> 01:34:20.969
I want to find out how to add these find in files.

795
01:34:22.679 --> 01:34:27.029
We're, we're crowdsourcing this, we should be able to figure this out.

796
01:34:27.029 --> 01:34:37.109
Okay, uh, up here, maybe.

797
01:34:38.158 --> 01:34:41.458
Find usage is 3 factor add 2 favorites.

798
01:34:44.069 --> 01:34:48.298
A history, we'll close it for a sec.

799
01:34:52.498 --> 01:34:56.698
Source new.

800
01:35:02.219 --> 01:35:10.649
Okay, when all else fails intelligence.

801
01:35:10.649 --> 01:35:14.279
And file to watch it.

802
01:35:15.958 --> 01:35:25.139
Right. Click the note no, I don't want to create new add a file.

803
01:35:29.309 --> 01:35:35.908
Okay, in the project tab, clipped it down to expand the tools gallery under project files add files.

804
01:35:37.198 --> 01:35:40.288
Okay, do we see the tools.

805
01:35:45.059 --> 01:35:51.899
Tools tools still not seeing it.

806
01:35:54.208 --> 01:35:58.618
Project tab clicked the down arrow to expand the tool's gallery.

807
01:36:00.569 --> 01:36:06.868
This is the project debt down here okay. Tools? No. So that solution is not.

808
01:36:06.868 --> 01:36:11.488
Effectively project files.

809
01:36:16.618 --> 01:36:28.948
All right, well, then I'll just do the direct way. I'm going to take the.

810
01:36:30.509 --> 01:36:40.738
Java file here and copy it to the project.

811
01:36:40.738 --> 01:36:44.729
Under idea projects, test exceptions.

812
01:36:44.729 --> 01:36:48.479
Source and paste.

813
01:36:53.248 --> 01:36:59.248
Did not get it, right? Yeah.

814
01:36:59.248 --> 01:37:03.448
Copy.

815
01:37:04.798 --> 01:37:08.158
Source and paste.

816
01:37:09.838 --> 01:37:16.019
All right, so this there now and sees it here.

817
01:37:17.069 --> 01:37:25.918
I don't like I shouldn't be at it. Well, maybe it doesn't like having to point to a remote location for dot main. Let's see what happens here.

818
01:37:28.559 --> 01:37:34.408
What did we get? We got could not find the file now why isn't it?

819
01:37:34.408 --> 01:37:37.529
Crashing well, because I handled.

820
01:37:37.529 --> 01:37:42.118
I found an exception, right go to my.

821
01:37:42.118 --> 01:37:45.748
Later in the summer class? No, the CSV reader.

822
01:37:45.748 --> 01:37:48.809
Okay, so when I did the try.

823
01:37:48.809 --> 01:37:57.538
I didn't report an error, so this is where okay by taking the shortcut route, just being lazy not doing anything. If it catches that exception.

824
01:37:57.538 --> 01:38:02.548
I don't know what happened system dot err dot print.

825
01:38:04.889 --> 01:38:09.929
Cannot or file dot file. Okay.

826
01:38:09.929 --> 01:38:15.359
Just take care of that and then run it again.

827
01:38:19.498 --> 01:38:22.769
And now we see well, not found now.

828
01:38:22.769 --> 01:38:27.208
You put it in a red I wonder if that's because I'm going to system dot err right?

829
01:38:28.283 --> 01:38:41.934
Okay, so look at that.

830
01:38:42.238 --> 01:38:48.208
When I go to system dot dot front line, this font is black, and they're going to system that air. It puts it in red.

831
01:38:48.208 --> 01:38:55.559
To emphasize it, so that's the kind of cool feature for that, but it won't happen. You know, if you're just running console course, it's just the ID.

832
01:38:55.559 --> 01:39:00.029
But now I need to open, I'm going to use that full path. Like I do before.

833
01:39:01.139 --> 01:39:07.738
Obviously, it's not looking, I got to find out where it looks for that file. I'm not sure. Right. It's not under the source folder though.

834
01:39:07.738 --> 01:39:11.729
Is looking somewhere else for it may be in the target in the build directory.

835
01:39:11.729 --> 01:39:18.238
Which would make sense. Um, but let me pull this out.

836
01:39:18.238 --> 01:39:21.328
And put it up at the.

837
01:39:21.328 --> 01:39:27.269
Documents level, just to be consistent and then change a code to look at the full path.

838
01:39:31.979 --> 01:39:42.029
In order to put the path path is up here so it's gonna be C and where you can use and use. Backslash you have to use double backslash cause this is.

839
01:39:42.029 --> 01:39:46.349
Uh, Windows and interprets it as a backslash escape.

840
01:39:46.349 --> 01:39:49.618
But you can use, you should be able to use a forward slash.

841
01:39:49.618 --> 01:39:54.118
Users single documents.

842
01:39:54.118 --> 01:39:57.599
Editors all right. Let's try this.

843
01:40:03.208 --> 01:40:08.878
And there we go, so see, I have exactly the same results when it reads the CSB file. So that's what we're expecting.

844
01:40:08.878 --> 01:40:12.029
So any questions on what this is doing.

845
01:40:12.029 --> 01:40:17.219
Hey, this is again reading somebody else's code. I should put an idea up here.

846
01:40:17.219 --> 01:40:20.429
I don't know who I am. Okay.

847
01:40:20.429 --> 01:40:26.309
And this is showing that I've got a.

848
01:40:26.309 --> 01:40:31.859
To non public classes to find the the same and the same with the interface.

849
01:40:31.859 --> 01:40:41.038
By not declaring it public, it can be put in the same file. Otherwise it has to be in the file by itself. And if you look at a compile here.

850
01:40:43.168 --> 01:40:48.118
Try to remember where I am at and the idea of projects go into the build folder.

851
01:40:48.118 --> 01:40:51.118
Out production.

852
01:40:51.118 --> 01:40:56.788
Test exceptions. Okay. So look at, it creates the classes, even though.

853
01:40:56.788 --> 01:41:01.708
They're not separate files. It creates the C. S. V. reader.

854
01:41:01.708 --> 01:41:07.918
It's really hard not to put CVS keep getting confused with the drug store, but a C. S. V.

855
01:41:07.918 --> 01:41:18.628
Hey, and the land the summer, and then the number collection class so they create separate class files for each of those, even though they're in the same file, it'll split them out into separate class files where you want to build it.

856
01:41:18.628 --> 01:41:25.288
So that's the ungraded exercise. So now you have that in your repository.

857
01:41:25.288 --> 01:41:30.298
And what you want to do is you want to go to the graded assignment instructions.

858
01:41:32.759 --> 01:41:42.418
And those, we can find my canvas session here. Somewhere there we go.

859
01:41:42.418 --> 01:41:45.868
Okay, so Here's what you do for the greater the assignment.

860
01:41:45.868 --> 01:41:51.988
Um, you've got the basis for the code, you've got the practice exercise solutions.

861
01:41:51.988 --> 01:42:01.019
Make sure you get it running and everything's working. Fine on that. What you're going to do is you're going to add another interface in the same file. Just don't make it public. It's going to be called.

862
01:42:01.019 --> 01:42:07.048
Well, it's going to some, an array of doubles instead of managers. You can call it whatever you want.

863
01:42:07.048 --> 01:42:11.729
Add the code in the Lambda summer class.

864
01:42:11.729 --> 01:42:15.298
The duplicates what we did with the imager array.

865
01:42:15.298 --> 01:42:26.519
And do it with a double, or right now, so you're gonna do a test array that sums doubles and then read from a CSB file with doubles and it with the same data to make sure that works. Okay. So that means you need to add.

866
01:42:26.519 --> 01:42:30.359
Uh, the CSB file should work for both.

867
01:42:30.359 --> 01:42:37.679
Because you're reading strengths, so that works as is you don't need to touch that method, but the number collection class.

868
01:42:37.679 --> 01:42:45.029
You need to add another method, just like the 1 that converts a string to integers. Now you need to do on the credit diversity string that doubles returns. The doubles are right.

869
01:42:45.029 --> 01:42:50.219
Okay, and so that's the stuff you need to add and then.

870
01:42:50.219 --> 01:43:02.338
I want you to add, I want you to change and the CSP reader. We have the file not found thing. I want you to change that. Try catch to use try with resources, which just means you put the scanner declaration up into the parentheses up above that.

871
01:43:02.338 --> 01:43:05.488
Okay, take it out to the other. That's how you gotta do for that.

872
01:43:05.488 --> 01:43:10.198
Right, right so and here's your doubles dot CSV file.

873
01:43:10.198 --> 01:43:13.469
Again, it's just a simple comma separated.

874
01:43:13.469 --> 01:43:18.149
Let's see if I can read it. Let's see how smart campuses here.

875
01:43:18.149 --> 01:43:22.828
Yeah, there's 19 bucks is taking it. Yeah, it's tough.

876
01:43:24.599 --> 01:43:28.588
I don't think it's going to do it. If you download it, it's going to open it in Excel, which is fine.

877
01:43:30.719 --> 01:43:39.899
And you just see has got 12345 values, different floating back and declare an array with the same values and you can test to make sure that the same then, you know, it's working correctly.

878
01:43:41.939 --> 01:43:47.969
And then the other part is, okay, now you need to figure out how to get it up into your repository.

879
01:43:47.969 --> 01:43:55.378
Okay, so if you go to the the quick reference, unless you want to go through the whole GitHub course thing what I gave you.

880
01:43:55.378 --> 01:43:58.588
A quick reference to see what we can use from this.

881
01:43:58.588 --> 01:44:03.628
No, you don't need to do this. That's creating an empty repository. Um.

882
01:44:03.628 --> 01:44:08.819
I, I not sure if when you do the clone.

883
01:44:08.934 --> 01:44:21.804
If it's going to do the association with remote repository, if you're just creating 1 from scratch and you wanted to link it up with your remote on GitHub, you would have to do this stuff or you add the repository and you set your username.

884
01:44:22.073 --> 01:44:28.974
You might have to do these steps, you know, just play around and see what happens. Okay. And then when you make your changes.

885
01:44:29.248 --> 01:44:35.488
Which you should just be changing the Java file, right? You do a Git add.

886
01:44:35.488 --> 01:44:43.469
Dot, and it will just add all the files, or you just do a Git add in the name of the Java file and then we'll add that it will stage it.

887
01:44:43.469 --> 01:44:49.229
Okay, and then you commit it, you put a little script, your comment what did you do? Okay added.

888
01:44:49.229 --> 01:44:52.769
The doubles thing, right? So that commits it.

889
01:44:52.769 --> 01:45:05.248
Then when you're all done, assuming that this is done for you by the clone, if not, you have to do it separately. So you're setting this remote and origin. So you say, get remote add origin.

890
01:45:05.248 --> 01:45:09.958
And this is going to be where you set your, what repository? And so locally.

891
01:45:09.958 --> 01:45:23.484
You do get push and minus you and origin just literally the words origin and master. Okay, because up here, you're setting it up here to do that. And so you just say, get push minus you origin and master.

892
01:45:23.724 --> 01:45:28.073
That should push it up to your remote repository. And then you should have those changes there.

893
01:45:28.349 --> 01:45:41.009
If you don't email me, let me know, let's see, we work it out but, you know, if this goes smooth, then we are, like I say, we're establishing a precedent here for all the programming courses for this college and.

894
01:45:41.009 --> 01:45:52.109
Yeah, I'll put your name to the top. Okay. Thanks for, you know, like in the front of a book, you know, for moving forward thanks to these people for helping me out all this stuff because that's what we're doing.

895
01:45:53.248 --> 01:45:57.208
Yeah.

896
01:45:58.889 --> 01:46:05.069
Well, even the semester, you never know right?

897
01:46:05.069 --> 01:46:08.458
So so that's all we got.

898
01:46:08.458 --> 01:46:12.569
Unless there's any questions uh, we're good. It's 821.

899
01:46:14.309 --> 01:46:19.588
Yes, it's going to be Java spring.

900
01:46:21.359 --> 01:46:25.738
Yes.

901
01:46:27.628 --> 01:46:30.868
Yeah, now, when I taught it last year, we didn't do.

902
01:46:30.868 --> 01:46:40.168
Uh, we just did it locally and then submitted the canvas. Right? So That'll be changed. But yes, that's what we'll be doing. And we doing things like, uh, spring boot.

903
01:46:40.168 --> 01:46:43.859
You know, starting projects doing things like, um.

904
01:46:43.859 --> 01:46:53.069
Uh, job of persistence and database operations, and they have like, a little in memory database you can run and do stuff with it. And so we'll be going through that.

905
01:46:53.069 --> 01:46:58.139
And most of what we ended up doing last summer is.

906
01:46:58.139 --> 01:47:02.099
We sat here in the classroom and work through the exercises.

907
01:47:02.099 --> 01:47:15.509
Or work through the stuff that you're doing, and I just said, okay, submit it. And that was good enough. You know, it was like, you're going off and doing a lot of homework offline. There was a few projects we did out of class, but most of it was just doing class. Now. If it's online.

908
01:47:15.509 --> 01:47:23.668
Uh, uh, hopefully I'll dig up the videos from that semester or otherwise. We'll just have to have instructions. Redo it follow along.

909
01:47:23.668 --> 01:47:30.298
Okay, yep, that class is going to be on line.

910
01:47:30.298 --> 01:47:36.719
Yeah, I mean, we could run it on Wednesday nights and go from like, 9 to midnight. If you want to do it.

911
01:47:36.719 --> 01:47:39.868
Security won't be real happy about it.

912
01:47:39.868 --> 01:47:48.238
Nicholas wouldn't be happy about that either. He was losing it after about the 1st hour so I've ever get says, no.

913
01:47:48.238 --> 01:47:51.868
Uh, uh.

914
01:47:51.868 --> 01:47:55.469
It I don't think I'm gonna run. I'm gonna have time cause I've got.

915
01:47:57.868 --> 01:48:01.469
Yeah, yeah, so we're getting the content for that.

916
01:48:04.769 --> 01:48:09.418
But, you know, it'll be intelligent, so you'll have this all set up and ready to go that.

917
01:48:17.788 --> 01:48:23.639
Well, yeah, professor brought us on Friday night. Um.

918
01:48:23.639 --> 01:48:28.859
I don't know, I mean, we could do synchronous on line at some point and I'm always available for help.

919
01:48:28.859 --> 01:48:34.048
You know, it's, it's like, uh, you can try it.

920
01:48:34.048 --> 01:48:37.918
Then the 1st week, does it go? Well, then, you know their mind.

921
01:48:37.918 --> 01:48:41.248
So, but you didn't you don't want to.

922
01:48:41.248 --> 01:48:44.759
Sure, um.

923
01:48:46.828 --> 01:48:54.359
Yeah, yeah.

924
01:48:59.338 --> 01:49:05.788
Okay oh, wow. Yeah. Okay.

925
01:49:07.859 --> 01:49:11.819
Yeah, I wish I could offer these every semester cause. Yeah.

926
01:49:11.819 --> 01:49:22.529
Remember you have to email email net because I'll have to override you because you won't have a prereq, but.

927
01:49:22.529 --> 01:49:27.389
Like say, you'll be 3 weeks ahead with this course. So it's like, that's a Pre. Req good.

928
01:49:27.389 --> 01:49:31.198
So, I can make a screen shot.

929
01:49:32.309 --> 01:49:42.988
Yeah, Rafael, you can ask professor broader. She took it last year. She made a so.

930
01:49:42.988 --> 01:49:48.868
Okay.

931
01:49:48.868 --> 01:49:55.618
So, thanks for coming in and thanks for being patient and we'll get smoother as we go along. I know.

932
01:49:55.618 --> 01:49:59.099
And again, let me know if you have any problems with that, get himself.

933
01:50:05.609 --> 01:50:11.788
Professor brought on says intelligent was the hardest part of the job. The 3 of this class will give you the experience.

934
01:50:13.828 --> 01:50:19.498
Well, spring is.

935
01:50:19.498 --> 01:50:23.099
Intelligent is like, really tightly integrated with spring.

936
01:50:23.099 --> 01:50:30.418
So, it's both. Yeah, well, I actually had a a few students that graduated and were in the industry.

937
01:50:30.418 --> 01:50:39.929
They came back and said, you gotta teach spring and intelligence is like 1 of the most popular professional out there. So that's why it's so complicated because it's used in the real world, right?

938
01:50:39.929 --> 01:50:46.019
And so they have to be some have to have something really powerful. So it's a bigger learning curve but it's a good tool to know.

939
01:50:57.838 --> 01:50:58.649
Yeah.

